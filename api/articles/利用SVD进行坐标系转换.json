{"title":"利用SVD进行坐标系转换","slug":"利用SVD进行坐标系转换","date":"2021-10-20T08:34:49.000Z","updated":"2021-10-20T12:58:09.182Z","comments":true,"path":"api/articles/利用SVD进行坐标系转换.json","excerpt":null,"covers":null,"content":"<p>我的项目遇到了一些问题，这个问题伴随了我好长时间一直没有解决，这几天询问了老师后终于有了新的思路，接下来我说明一下我的问题，以及解决方法</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><p>很普通的问题，我在利用双目测出深度之后，会形成以<strong>左相机光心为原点，图片的水平方向为X轴（左小右大），垂直方向为Y轴（上小下大），垂直于相机成像平面为Z轴（远小近大），类型为右手坐标系</strong>。但这个坐标系并不能满足于我的项目，我需要强制转换一个坐标系。</p>\n<p>一开始我想到的是制作<strong>旋转平移矩阵</strong>，也就是：</p>\n<script type=\"math/tex; mode=display\">\n\\left[\n \\begin{matrix}\n   R & \\vec{T} \\\\\n   \\vec{0} & 1 \n  \\end{matrix}\n  \\right]</script><p>但我忽略了<strong>秩</strong>的问题，总之直接去求并不能求出来。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>根据老师的提醒，我还是找到了解决的具体方法，直接采用SVD（奇异值分解）可以求出自己想要的具体矩阵。</p>\n<h3 id=\"奇异值分解\"><a href=\"#奇异值分解\" class=\"headerlink\" title=\"奇异值分解\"></a>奇异值分解</h3><p>又捡起了线性代数方面的知识，简单回顾了一下奇异值分解具体原理。</p>\n<p>奇异值分解是把矩阵分解成了：</p>\n<script type=\"math/tex; mode=display\">\nM = U \\Sigma V^T</script><p>其中，U和V是两个方阵，Sigma 矩阵是一个对角线是奇异值、其他位置是0的矩阵。</p>\n<p>numpy 提供了奇异值分解，直接调用即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">u, s, vt = np.linalg.svd(M)</span><br></pre></td></tr></table></figure>\n<h3 id=\"SVD法坐标系转换\"><a href=\"#SVD法坐标系转换\" class=\"headerlink\" title=\"SVD法坐标系转换\"></a>SVD法坐标系转换</h3><p>其实我并没有看懂具体原理是什么，我就是随便找到了公式，但这样也就足够了。</p>\n<p>我并没有去构造完整的旋转平移矩阵，我把它拆开了：</p>\n<script type=\"math/tex; mode=display\">\nP = \n\\left[\n \\begin{matrix}\n   R & \\vec{T} \\\\\n   \\vec{0} & 1 \n  \\end{matrix}\n  \\right]\nP_0 = \n  R  P_0  + T</script><p>简单讲一下：</p>\n<ul>\n<li>P是新的坐标，P_0是旧坐标，两者的形状都是<code>(N, 3)</code>，第0维度是点的个数，第1维度坐标（三个数字为一个坐标）</li>\n<li>R是旋转矩阵，T是平移向量</li>\n</ul>\n<p>既然使用了奇异值分解，那么就必须去制作被分解的矩阵，这里被分解的矩阵用M表示：</p>\n<script type=\"math/tex; mode=display\">\nM = \\sum^{n}_{i=1}\\left(  \\left( P_0^i - \\overline{P_0} \\right) \\cdot \\left( P^i - \\overline{P} \\right)^T\\right)</script><p>比较麻烦，按上面公式的步骤来讲就是：</p>\n<ul>\n<li>求出转换前和转换后的平均坐标。</li>\n<li>用转换前和转换后的坐标减去自己的平均坐标。</li>\n<li>进行内积操作</li>\n<li>累计求和</li>\n</ul>\n<p>当然写程序的时候可以使用并行化的原理，这样不仅节省时间，还方便处理。</p>\n<p>有了需要被分解的矩阵就可以奇异值分解了：</p>\n<script type=\"math/tex; mode=display\">\nM = U \\Sigma V^T</script><p>但我们并不需要奇异值，所以 Sigma 可以不要。</p>\n<p>接下来就是合成旋转矩阵：</p>\n<script type=\"math/tex; mode=display\">\nR = VU^T</script><p>很简单，就直接矩阵相乘。</p>\n<p><strong>注意：</strong>我们需要计算一下旋转矩阵的行列式，因为很有可能计算出来一个镜像旋转矩阵，这样是永远不额能旋转成功的。如果旋转矩阵的行列式为正数就正确，为负数就需要让旋转矩阵取反变成正数</p>\n<p>所以在</p>\n<p>平移矩阵就更好求了，但需要两个点的平均值：</p>\n<script type=\"math/tex; mode=display\">\nT = \\overline{P}^T - (R \\overline{P_0})</script><h3 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">points3D_transform</span>(<span class=\"params\">points1, points2</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    坐标转换</span></span><br><span class=\"line\"><span class=\"string\">    :param points1: shape: (M, 3)</span></span><br><span class=\"line\"><span class=\"string\">    :param points2: shape: (N, 3)</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算出所有点的平均坐标</span></span><br><span class=\"line\">    <span class=\"comment\"># 转换前和转换后都要计算</span></span><br><span class=\"line\">    center_points1 = np.mean(points1, <span class=\"number\">0</span>)</span><br><span class=\"line\">    center_points2 = np.mean(points2, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 每个坐标减去平均值</span></span><br><span class=\"line\">    new_points1 = points1 - center_points1</span><br><span class=\"line\">    new_points2 = points2 - center_points2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 矩阵相乘，构造一个矩阵</span></span><br><span class=\"line\">    M = new_points2.T @ new_points1</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 使用奇异值分解</span></span><br><span class=\"line\">    u, s, vt = np.linalg.svd(M)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 旋转矩阵</span></span><br><span class=\"line\">    R = u @ vt</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算出行列式是否是负数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> np.linalg.det(R) &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 小数就反了</span></span><br><span class=\"line\">        R = -R</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 反向计算出</span></span><br><span class=\"line\">    T = center_points2.T - (R @ center_points1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> R, T</span><br></pre></td></tr></table></figure>\n<p>我随便做了一个矩阵，简单测试一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 转换前坐标</span></span><br><span class=\"line\">point1 = np.array([</span><br><span class=\"line\">    [<span class=\"number\">162.68627451</span>, -<span class=\"number\">13.23529412</span>, <span class=\"number\">406.</span>],</span><br><span class=\"line\">    [-<span class=\"number\">173.68627451</span>, -<span class=\"number\">13.62745098</span>, <span class=\"number\">405.05882353</span>],</span><br><span class=\"line\">    [-<span class=\"number\">5.1372549</span>, <span class=\"number\">71.78431373</span>, <span class=\"number\">415.11764706</span>],</span><br><span class=\"line\">    [-<span class=\"number\">5.15686275</span>, -<span class=\"number\">96.25490196</span>, <span class=\"number\">399.15686275</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 欧氏距离</span></span><br><span class=\"line\">x = comput_distance(world_matrix[<span class=\"number\">0</span>], world_matrix[<span class=\"number\">1</span>]) / <span class=\"number\">2</span></span><br><span class=\"line\">y = comput_distance(world_matrix[<span class=\"number\">2</span>], world_matrix[<span class=\"number\">3</span>]) / <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换后坐标</span></span><br><span class=\"line\">point2 = np.array([</span><br><span class=\"line\">    [x, <span class=\"number\">0</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">    [-x, <span class=\"number\">0</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>, y, <span class=\"number\">0</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>, -y, <span class=\"number\">0</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换</span></span><br><span class=\"line\">R, T = points3D_transform(point1, point2)</span><br></pre></td></tr></table></figure>\n","more":"<p>我的项目遇到了一些问题，这个问题伴随了我好长时间一直没有解决，这几天询问了老师后终于有了新的思路，接下来我说明一下我的问题，以及解决方法</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><p>很普通的问题，我在利用双目测出深度之后，会形成以<strong>左相机光心为原点，图片的水平方向为X轴（左小右大），垂直方向为Y轴（上小下大），垂直于相机成像平面为Z轴（远小近大），类型为右手坐标系</strong>。但这个坐标系并不能满足于我的项目，我需要强制转换一个坐标系。</p>\n<p>一开始我想到的是制作<strong>旋转平移矩阵</strong>，也就是：</p>\n<script type=\"math/tex; mode=display\">\n\\left[\n \\begin{matrix}\n   R & \\vec{T} \\\\\n   \\vec{0} & 1 \n  \\end{matrix}\n  \\right]</script><p>但我忽略了<strong>秩</strong>的问题，总之直接去求并不能求出来。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>根据老师的提醒，我还是找到了解决的具体方法，直接采用SVD（奇异值分解）可以求出自己想要的具体矩阵。</p>\n<h3 id=\"奇异值分解\"><a href=\"#奇异值分解\" class=\"headerlink\" title=\"奇异值分解\"></a>奇异值分解</h3><p>又捡起了线性代数方面的知识，简单回顾了一下奇异值分解具体原理。</p>\n<p>奇异值分解是把矩阵分解成了：</p>\n<script type=\"math/tex; mode=display\">\nM = U \\Sigma V^T</script><p>其中，U和V是两个方阵，Sigma 矩阵是一个对角线是奇异值、其他位置是0的矩阵。</p>\n<p>numpy 提供了奇异值分解，直接调用即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">u, s, vt = np.linalg.svd(M)</span><br></pre></td></tr></table></figure>\n<h3 id=\"SVD法坐标系转换\"><a href=\"#SVD法坐标系转换\" class=\"headerlink\" title=\"SVD法坐标系转换\"></a>SVD法坐标系转换</h3><p>其实我并没有看懂具体原理是什么，我就是随便找到了公式，但这样也就足够了。</p>\n<p>我并没有去构造完整的旋转平移矩阵，我把它拆开了：</p>\n<script type=\"math/tex; mode=display\">\nP = \n\\left[\n \\begin{matrix}\n   R & \\vec{T} \\\\\n   \\vec{0} & 1 \n  \\end{matrix}\n  \\right]\nP_0 = \n  R  P_0  + T</script><p>简单讲一下：</p>\n<ul>\n<li>P是新的坐标，P_0是旧坐标，两者的形状都是<code>(N, 3)</code>，第0维度是点的个数，第1维度坐标（三个数字为一个坐标）</li>\n<li>R是旋转矩阵，T是平移向量</li>\n</ul>\n<p>既然使用了奇异值分解，那么就必须去制作被分解的矩阵，这里被分解的矩阵用M表示：</p>\n<script type=\"math/tex; mode=display\">\nM = \\sum^{n}_{i=1}\\left(  \\left( P_0^i - \\overline{P_0} \\right) \\cdot \\left( P^i - \\overline{P} \\right)^T\\right)</script><p>比较麻烦，按上面公式的步骤来讲就是：</p>\n<ul>\n<li>求出转换前和转换后的平均坐标。</li>\n<li>用转换前和转换后的坐标减去自己的平均坐标。</li>\n<li>进行内积操作</li>\n<li>累计求和</li>\n</ul>\n<p>当然写程序的时候可以使用并行化的原理，这样不仅节省时间，还方便处理。</p>\n<p>有了需要被分解的矩阵就可以奇异值分解了：</p>\n<script type=\"math/tex; mode=display\">\nM = U \\Sigma V^T</script><p>但我们并不需要奇异值，所以 Sigma 可以不要。</p>\n<p>接下来就是合成旋转矩阵：</p>\n<script type=\"math/tex; mode=display\">\nR = VU^T</script><p>很简单，就直接矩阵相乘。</p>\n<p><strong>注意：</strong>我们需要计算一下旋转矩阵的行列式，因为很有可能计算出来一个镜像旋转矩阵，这样是永远不额能旋转成功的。如果旋转矩阵的行列式为正数就正确，为负数就需要让旋转矩阵取反变成正数</p>\n<p>所以在</p>\n<p>平移矩阵就更好求了，但需要两个点的平均值：</p>\n<script type=\"math/tex; mode=display\">\nT = \\overline{P}^T - (R \\overline{P_0})</script><h3 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">points3D_transform</span>(<span class=\"params\">points1, points2</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    坐标转换</span></span><br><span class=\"line\"><span class=\"string\">    :param points1: shape: (M, 3)</span></span><br><span class=\"line\"><span class=\"string\">    :param points2: shape: (N, 3)</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算出所有点的平均坐标</span></span><br><span class=\"line\">    <span class=\"comment\"># 转换前和转换后都要计算</span></span><br><span class=\"line\">    center_points1 = np.mean(points1, <span class=\"number\">0</span>)</span><br><span class=\"line\">    center_points2 = np.mean(points2, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 每个坐标减去平均值</span></span><br><span class=\"line\">    new_points1 = points1 - center_points1</span><br><span class=\"line\">    new_points2 = points2 - center_points2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 矩阵相乘，构造一个矩阵</span></span><br><span class=\"line\">    M = new_points2.T @ new_points1</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 使用奇异值分解</span></span><br><span class=\"line\">    u, s, vt = np.linalg.svd(M)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 旋转矩阵</span></span><br><span class=\"line\">    R = u @ vt</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算出行列式是否是负数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> np.linalg.det(R) &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 小数就反了</span></span><br><span class=\"line\">        R = -R</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 反向计算出</span></span><br><span class=\"line\">    T = center_points2.T - (R @ center_points1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> R, T</span><br></pre></td></tr></table></figure>\n<p>我随便做了一个矩阵，简单测试一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 转换前坐标</span></span><br><span class=\"line\">point1 = np.array([</span><br><span class=\"line\">    [<span class=\"number\">162.68627451</span>, -<span class=\"number\">13.23529412</span>, <span class=\"number\">406.</span>],</span><br><span class=\"line\">    [-<span class=\"number\">173.68627451</span>, -<span class=\"number\">13.62745098</span>, <span class=\"number\">405.05882353</span>],</span><br><span class=\"line\">    [-<span class=\"number\">5.1372549</span>, <span class=\"number\">71.78431373</span>, <span class=\"number\">415.11764706</span>],</span><br><span class=\"line\">    [-<span class=\"number\">5.15686275</span>, -<span class=\"number\">96.25490196</span>, <span class=\"number\">399.15686275</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 欧氏距离</span></span><br><span class=\"line\">x = comput_distance(world_matrix[<span class=\"number\">0</span>], world_matrix[<span class=\"number\">1</span>]) / <span class=\"number\">2</span></span><br><span class=\"line\">y = comput_distance(world_matrix[<span class=\"number\">2</span>], world_matrix[<span class=\"number\">3</span>]) / <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换后坐标</span></span><br><span class=\"line\">point2 = np.array([</span><br><span class=\"line\">    [x, <span class=\"number\">0</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">    [-x, <span class=\"number\">0</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>, y, <span class=\"number\">0</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>, -y, <span class=\"number\">0</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换</span></span><br><span class=\"line\">R, T = points3D_transform(point1, point2)</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"机器视觉","path":"api/categories/机器视觉.json"}],"tags":[{"name":"双目立体成像","path":"api/tags/双目立体成像.json"},{"name":"原理","path":"api/tags/原理.json"}]}