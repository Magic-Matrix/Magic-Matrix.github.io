{"title":"基于Pytorch搭建的物体检测神经网络","slug":"基于Pytorch搭建的物体检测神经网络","date":"2021-03-19T00:52:11.000Z","updated":"2021-03-26T02:37:12.591Z","comments":true,"path":"api/articles/基于Pytorch搭建的物体检测神经网络.json","excerpt":"去年的时候，老师说我可以尝试搭建一个物体检测的神经网络，要求是按照自己的想法去搭建，这我就很开心了，毕竟是属于我自己的神经网络。 [Figure] ","covers":["/2021/03/%E5%9F%BA%E4%BA%8EPytorch%E6%90%AD%E5%BB%BA%E7%9A%84%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/2810634837.jpg","/2021/03/%E5%9F%BA%E4%BA%8EPytorch%E6%90%AD%E5%BB%BA%E7%9A%84%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/mg308c08c74b.gif","/2021/03/%E5%9F%BA%E4%BA%8EPytorch%E6%90%AD%E5%BB%BA%E7%9A%84%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/16064504838170893.jpg"],"content":"<p>去年的时候，老师说我可以尝试搭建一个物体检测的神经网络，要求是按照自己的想法去搭建，这我就很开心了，毕竟是属于我自己的神经网络。</p>\n<p><img src=\"/2021/03/%E5%9F%BA%E4%BA%8EPytorch%E6%90%AD%E5%BB%BA%E7%9A%84%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/2810634837.jpg\" alt=\"2810634837\" style=\"zoom:50%;\"></p>\n<a id=\"more\"></a>\n<p>但由于期末考试，我没有时间去搭建，所以就暂时搁置了。但我一直没忘做这件事，考完试后，我直接开工。</p>\n<h2 id=\"数据集\"><a href=\"#数据集\" class=\"headerlink\" title=\"数据集\"></a>数据集</h2><p>首先必须识别一些东西，干脆识别人吧，这样就方便多了，我可以在一个视频里，每隔一秒截一张图，用来识别人物。</p>\n<p><img src=\"/2021/03/%E5%9F%BA%E4%BA%8EPytorch%E6%90%AD%E5%BB%BA%E7%9A%84%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/mg308c08c74b.gif\" alt=\"mg308c08c74b\"></p>\n<p>我就使用了生活大爆炸的一段视频，截取了好多好多谢耳朵的图片（毕竟这货太有特点了，不整整他感觉都对不起他一样）。</p>\n<p><img src=\"/2021/03/%E5%9F%BA%E4%BA%8EPytorch%E6%90%AD%E5%BB%BA%E7%9A%84%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/16064504838170893.jpg\" alt=\"16064504838170893\"></p>\n<p>我用了一个星期的时间，给图片进行了标定，一共有800多张，我保存在了一个压缩文件里（也就是<code>data.zip</code>文件），我还把图片缩小了原先的四分之一，也就是长宽各缩小一半。标注的数据放在了压缩文件中的<code>datas.json</code>文件里。</p>\n<p>到目前为止我有了数据集，而我需要一个程序用来调用这个数据集，我写了一个，保存在了<code>load_datas.py</code>文件中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zipfile</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bantch</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, path, number=<span class=\"number\">16</span></span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        制作一个列表进行分组</span></span><br><span class=\"line\"><span class=\"string\">        :param path: 文件地址</span></span><br><span class=\"line\"><span class=\"string\">        :param number: 分组个数</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.my_zip = zipfile.ZipFile(path)</span><br><span class=\"line\">        <span class=\"comment\"># 获得json文件</span></span><br><span class=\"line\">        file = self.my_zip.read(<span class=\"string\">&#x27;datas.json&#x27;</span>).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">        self.json_file = json.loads(file)</span><br><span class=\"line\">        file_name = self.my_zip.namelist()[<span class=\"number\">2</span>:]</span><br><span class=\"line\">        self.bantch = []</span><br><span class=\"line\">        mini = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, temp <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(file_name):</span><br><span class=\"line\">            mini.append(temp)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i % number == number - <span class=\"number\">1</span>:</span><br><span class=\"line\">                self.bantch.append(mini)</span><br><span class=\"line\">                <span class=\"keyword\">del</span> mini</span><br><span class=\"line\">                mini = []</span><br><span class=\"line\">        self.length = <span class=\"built_in\">len</span>(self.bantch)</span><br><span class=\"line\">        print(<span class=\"string\">&quot;总共分成&quot;</span>, self.length, <span class=\"string\">&quot;组，每组有&quot;</span>, number, <span class=\"string\">&quot;个&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__findJsonOfImage</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        检查此图片是否有对应的数据</span></span><br><span class=\"line\"><span class=\"string\">        :param name: 图片名</span></span><br><span class=\"line\"><span class=\"string\">        :return: 如果有会输出True和坐标，没有就输出False和None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 掐头去尾</span></span><br><span class=\"line\">        name = name[name.find(<span class=\"string\">&#x27;/&#x27;</span>) + <span class=\"number\">1</span>:name.rfind(<span class=\"string\">&#x27;.&#x27;</span>)]</span><br><span class=\"line\">        <span class=\"comment\"># 尝试读取一下</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            x1 = self.json_file[name][<span class=\"string\">&#x27;xmin&#x27;</span>]</span><br><span class=\"line\">            x2 = self.json_file[name][<span class=\"string\">&#x27;xmax&#x27;</span>]</span><br><span class=\"line\">            y1 = self.json_file[name][<span class=\"string\">&#x27;ymin&#x27;</span>]</span><br><span class=\"line\">            y2 = self.json_file[name][<span class=\"string\">&#x27;ymax&#x27;</span>]</span><br><span class=\"line\">            temp = (x1, y1), (x2, y2)</span><br><span class=\"line\">            flag = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 看来是读取失败了</span></span><br><span class=\"line\">            temp = <span class=\"literal\">None</span></span><br><span class=\"line\">            flag = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag, temp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readOneImage</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        获取图片</span></span><br><span class=\"line\"><span class=\"string\">        :param name: 图片名</span></span><br><span class=\"line\"><span class=\"string\">        :param my_zip: 压缩文件</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        image = self.my_zip.read(name)</span><br><span class=\"line\">        image = cv2.imdecode(np.array(<span class=\"built_in\">bytearray</span>(image), dtype=<span class=\"string\">&#x27;uint8&#x27;</span>), cv2.IMREAD_UNCHANGED)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> image</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load</span>(<span class=\"params\">self, number, mode=<span class=\"literal\">False</span></span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        加载一组图片</span></span><br><span class=\"line\"><span class=\"string\">        :param group: 文件组</span></span><br><span class=\"line\"><span class=\"string\">        :param number: 加载第几组</span></span><br><span class=\"line\"><span class=\"string\">        :param mode: 是否开启仿yolo模式</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        image_list = []</span><br><span class=\"line\">        data_list = []</span><br><span class=\"line\">        <span class=\"comment\"># 获取所有图片名</span></span><br><span class=\"line\">        file_name = self.bantch[number]</span><br><span class=\"line\">        <span class=\"comment\"># 遍历所有文件</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, name <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(file_name):</span><br><span class=\"line\">            <span class=\"comment\"># 获取信息</span></span><br><span class=\"line\">            flag, temp = self.__findJsonOfImage(name)</span><br><span class=\"line\">            <span class=\"comment\"># 获取图片</span></span><br><span class=\"line\">            image = self.readOneImage(name)</span><br><span class=\"line\">            <span class=\"comment\"># 整治数据</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">                <span class=\"comment\"># 如果有”框“</span></span><br><span class=\"line\">                (x1, y1), (x2, y2) = temp</span><br><span class=\"line\">                <span class=\"keyword\">if</span> mode:</span><br><span class=\"line\">                    <span class=\"comment\"># 此模式模仿yolo</span></span><br><span class=\"line\">                    x = (x1 + x2) // <span class=\"number\">2</span></span><br><span class=\"line\">                    y = (y1 + y2) // <span class=\"number\">2</span></span><br><span class=\"line\">                    w = <span class=\"built_in\">abs</span>(x1 - x2)</span><br><span class=\"line\">                    h = <span class=\"built_in\">abs</span>(y1 - y2)</span><br><span class=\"line\">                    <span class=\"comment\"># 加入一个数据</span></span><br><span class=\"line\">                    <span class=\"comment\"># 格式：[物体置信度，列，行，高，宽]</span></span><br><span class=\"line\">                    data_list.append([<span class=\"number\">1</span>, x, y, h, w])</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># 此模式输出框的左上角和左下角两个点</span></span><br><span class=\"line\">                    data_list.append([<span class=\"number\">1</span>, x1, y1, x2, y2])</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 没有”框“了</span></span><br><span class=\"line\">                <span class=\"comment\"># 除了物体置信度，其他数就瞎填吧</span></span><br><span class=\"line\">                data_list.append([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"comment\"># 将图片存进列表中</span></span><br><span class=\"line\">            image_list.append(image)</span><br><span class=\"line\">        <span class=\"comment\"># 整合成numpy数组</span></span><br><span class=\"line\">        <span class=\"comment\"># 维度解释（2维度）：（样本数，输出特征个数）</span></span><br><span class=\"line\">        data_list = np.array(data_list)</span><br><span class=\"line\">        <span class=\"comment\"># 维度解释（4维度）：（样本数，图片高，图片宽，通道数）</span></span><br><span class=\"line\">        image_list = np.array(image_list)</span><br><span class=\"line\">        image_list = np.transpose(image_list, (<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">        image_list, data_list = self.deal(image_list, data_list)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> image_list, data_list</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal</span>(<span class=\"params\">self, image_list, data_list</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        数据处理：图片归一化，数据后面四个缩小100分之一</span></span><br><span class=\"line\"><span class=\"string\">        :param image_list: 一组图片</span></span><br><span class=\"line\"><span class=\"string\">        :param data_list: 一组数据</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        data_list_1 = data_list[:, <span class=\"number\">0</span>].reshape(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        data_list_2 = data_list[:, <span class=\"number\">1</span>:] / <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"comment\"># 拼接恢复</span></span><br><span class=\"line\">        data_list = np.hstack((data_list_1, data_list_2))</span><br><span class=\"line\">        <span class=\"comment\"># 灰度归一化，并转换成张量</span></span><br><span class=\"line\">        train_image_list = (torch.from_numpy(image_list) / <span class=\"number\">255.</span>)</span><br><span class=\"line\">        train_data_list = torch.from_numpy(data_list)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> train_image_list, train_data_list</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resume</span>(<span class=\"params\">self, data_list</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        数据恢复</span></span><br><span class=\"line\"><span class=\"string\">        :param data_list: 一组数据</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        num = <span class=\"built_in\">len</span>(data_list.size())</span><br><span class=\"line\">        <span class=\"keyword\">if</span> num == <span class=\"number\">2</span>:</span><br><span class=\"line\">            data = (data_list * <span class=\"number\">100</span>).detach().numpy()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">&quot;出现错误，强制结束&quot;</span>)</span><br><span class=\"line\">            exit()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">image</span>(<span class=\"params\">self, name=<span class=\"literal\">None</span>, group=<span class=\"literal\">None</span>, number=<span class=\"literal\">None</span>, mode=<span class=\"literal\">False</span></span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        加载一张原图片</span></span><br><span class=\"line\"><span class=\"string\">        :param name:</span></span><br><span class=\"line\"><span class=\"string\">        :param group:</span></span><br><span class=\"line\"><span class=\"string\">        :param number:</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name == <span class=\"literal\">None</span> <span class=\"keyword\">and</span> group != <span class=\"literal\">None</span> <span class=\"keyword\">and</span> number != <span class=\"literal\">None</span>:</span><br><span class=\"line\">            new_name = self.bantch[group][number]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name != <span class=\"literal\">None</span> <span class=\"keyword\">and</span> group == <span class=\"literal\">None</span> <span class=\"keyword\">and</span> number == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            new_name = name</span><br><span class=\"line\">        img = self.readOneImage(new_name)</span><br><span class=\"line\">        flag, data = self.__findJsonOfImage(new_name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">            <span class=\"comment\"># 如果有”框“</span></span><br><span class=\"line\">            (x1, y1), (x2, y2) = data</span><br><span class=\"line\">            <span class=\"keyword\">if</span> mode:</span><br><span class=\"line\">                <span class=\"comment\"># 此模式模仿yolo</span></span><br><span class=\"line\">                x = (x1 + x2) // <span class=\"number\">2</span></span><br><span class=\"line\">                y = (y1 + y2) // <span class=\"number\">2</span></span><br><span class=\"line\">                w = <span class=\"built_in\">abs</span>(x1 - x2)</span><br><span class=\"line\">                h = <span class=\"built_in\">abs</span>(y1 - y2)</span><br><span class=\"line\">                <span class=\"comment\"># 加入一个数据</span></span><br><span class=\"line\">                <span class=\"comment\"># 格式：[物体置信度，列，行，高，宽]</span></span><br><span class=\"line\">                data = [<span class=\"number\">1</span>, x, y, h, w]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                data = [<span class=\"number\">1</span>, x1, y1, x2, y2]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            data = [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> img, data</span><br></pre></td></tr></table></figure>\n<p>我在这个程序中，提供了两种模式，默认是仿yolo的模式，也就是一个置信度，一个坐标，方框的长和宽，总共五个数据。</p>\n<h2 id=\"模型搭建\"><a href=\"#模型搭建\" class=\"headerlink\" title=\"模型搭建\"></a>模型搭建</h2><p>我没用花里胡哨的方式，直接搭建了一个，三层卷积层用来提取特征，三层全连接层。基本一看就能看懂：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> gc</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> network.model <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CNN</span>(<span class=\"params\">nn.Module</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(CNN, self).__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># nn.Sequential是一个有序的容器，神经网络模块将按照在传入构造器的顺序依次被添加到计算图中执行，同时以神经网络模块为元素的有序字典也可以作为传入参数。</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里nn.Sequential里面加入了[卷积,ReLU，池化]三部分</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 一些设置</span></span><br><span class=\"line\">        in_channels = <span class=\"number\">3</span>                 <span class=\"comment\"># input通道数</span></span><br><span class=\"line\">        out_channels = <span class=\"number\">16</span>               <span class=\"comment\"># output通道数</span></span><br><span class=\"line\">        kernel_size = <span class=\"number\">3</span>                 <span class=\"comment\"># 卷积核的边长</span></span><br><span class=\"line\">        pool_size = <span class=\"number\">3</span>                   <span class=\"comment\"># 池化尺寸</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.conv_1 = Conv(in_channels, out_channels, kernel_size, pool_size)</span><br><span class=\"line\">        h,w = comput_size(<span class=\"number\">264</span>, <span class=\"number\">480</span>, kernel_size, pool_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 一些设置</span></span><br><span class=\"line\">        in_channels = out_channels      <span class=\"comment\"># input通道数</span></span><br><span class=\"line\">        out_channels = <span class=\"number\">32</span>               <span class=\"comment\"># output通道数</span></span><br><span class=\"line\">        kernel_size = <span class=\"number\">3</span>                 <span class=\"comment\"># 卷积核的边长</span></span><br><span class=\"line\">        pool_size = <span class=\"number\">3</span>                   <span class=\"comment\"># 池化尺寸</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.conv_2 = Conv(in_channels, out_channels, kernel_size, pool_size)</span><br><span class=\"line\">        h, w = comput_size(h,w, kernel_size, pool_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 一些设置</span></span><br><span class=\"line\">        in_channels = out_channels      <span class=\"comment\"># input通道数</span></span><br><span class=\"line\">        out_channels = <span class=\"number\">64</span>               <span class=\"comment\"># output通道数</span></span><br><span class=\"line\">        kernel_size = <span class=\"number\">3</span>                 <span class=\"comment\"># 卷积核的边长</span></span><br><span class=\"line\">        pool_size = <span class=\"number\">3</span>                   <span class=\"comment\"># 池化尺寸</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.conv_3 = Conv(in_channels, out_channels, kernel_size, pool_size)</span><br><span class=\"line\">        h, w = comput_size(h, w, kernel_size, pool_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 一些设置</span></span><br><span class=\"line\">        in_channels = out_channels * h * w  <span class=\"comment\"># input通道数</span></span><br><span class=\"line\">        out_channels = in_channels // <span class=\"number\">8</span>    <span class=\"comment\"># output通道数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.line_1 = Line(in_channels, out_channels)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 一些设置</span></span><br><span class=\"line\">        in_channels = out_channels          <span class=\"comment\"># input通道数</span></span><br><span class=\"line\">        out_channels = in_channels // <span class=\"number\">8</span>    <span class=\"comment\"># output通道数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.line_2 = Line(in_channels, out_channels)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 一些设置</span></span><br><span class=\"line\">        in_channels = out_channels          <span class=\"comment\"># input通道数</span></span><br><span class=\"line\">        out_channels = in_channels // <span class=\"number\">8</span>    <span class=\"comment\"># output通道数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.line_3 = Line(in_channels, out_channels)</span><br><span class=\"line\"></span><br><span class=\"line\">        in_channels = out_channels  <span class=\"comment\"># input通道数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.end = End(in_channels)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 实例化损失函数（交叉熵）</span></span><br><span class=\"line\">        self.loss = nn.MSELoss()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span>(<span class=\"params\">self, x</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        x = self.conv_1(x)</span><br><span class=\"line\">        x = self.conv_2(x)</span><br><span class=\"line\">        x = self.conv_3(x)</span><br><span class=\"line\">        x = x.reshape(x.size(<span class=\"number\">0</span>), -<span class=\"number\">1</span>)</span><br><span class=\"line\">        x = self.line_1(x)</span><br><span class=\"line\">        x = self.line_2(x)</span><br><span class=\"line\">        x = self.line_3(x)</span><br><span class=\"line\">        x = self.end(x)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型\"><a href=\"#训练模型\" class=\"headerlink\" title=\"训练模型\"></a>训练模型</h2><p>训练的方式是我自己单独写的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datas.load_datas <span class=\"keyword\">import</span> Bantch</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myCNN</span>(<span class=\"params\">path,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          GPU=<span class=\"literal\">False</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          learning_rate=<span class=\"number\">0.0009</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          num_epochs=<span class=\"number\">200</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          minibatch_size=<span class=\"number\">8</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cnn = CNN()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> GPU:</span><br><span class=\"line\">        print(<span class=\"string\">&quot;正在将神经网络放入GPU中...&quot;</span>)</span><br><span class=\"line\">        cnn = cnn.cuda()</span><br><span class=\"line\">        print(<span class=\"string\">&quot;神经网络已经成功放入GPU\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train = Bantch(path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 批次数量</span></span><br><span class=\"line\">    num_batch = train.length</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 清理一次</span></span><br><span class=\"line\">    gc.collect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 使用动量下降</span></span><br><span class=\"line\">    optimizer = torch.optim.Adam(cnn.parameters(), lr=learning_rate, betas=(<span class=\"number\">0.9</span>, <span class=\"number\">0.999</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 保存每次迭代的cost的列表</span></span><br><span class=\"line\">    costs = []</span><br><span class=\"line\">    start = datetime.datetime.now()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 开始num_epochs次数次下降</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_epochs):</span><br><span class=\"line\">        epoch_cost = <span class=\"number\">0</span></span><br><span class=\"line\">        now = datetime.datetime.now()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> step <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_batch):</span><br><span class=\"line\">            <span class=\"comment\"># 加载一组图片</span></span><br><span class=\"line\"></span><br><span class=\"line\">            batch_x, batch_y = train.load(step, mode=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> GPU:</span><br><span class=\"line\">                <span class=\"comment\"># print(&quot;正在将 第&quot;, step, &quot;组 mini bantch 放入GPU中...&quot;)</span></span><br><span class=\"line\">                batch_x = batch_x.cuda()</span><br><span class=\"line\">                batch_y = batch_y.cuda()</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 清理一次</span></span><br><span class=\"line\">                gc.collect()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 前向传播</span></span><br><span class=\"line\">            output = cnn(batch_x)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 计算一次mini_batch成本</span></span><br><span class=\"line\">            cost = cnn.loss(output, batch_y.<span class=\"built_in\">float</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 将一套mini_batch成本进行平均</span></span><br><span class=\"line\">            epoch_cost += cost / num_batch</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 梯度归零</span></span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 反向传播</span></span><br><span class=\"line\">            cost.backward()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 更新参数</span></span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 清理一次</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> epoch % <span class=\"number\">1</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            costs.append(epoch_cost)</span><br><span class=\"line\">            new = datetime.datetime.now()</span><br><span class=\"line\">            time = new - now</span><br><span class=\"line\">            time_all = time * (num_epochs - epoch)</span><br><span class=\"line\">            have_time = new - start</span><br><span class=\"line\">            print(<span class=\"string\">&quot;已经运行了&quot;</span>, have_time, <span class=\"string\">&quot;，预计&quot;</span>, time_all, <span class=\"string\">&quot;后结束&quot;</span>)</span><br><span class=\"line\">            print(<span class=\"string\">&#x27;Cost after epoch %i : %f&#x27;</span> % (epoch, epoch_cost), <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 画学习曲线</span></span><br><span class=\"line\">    plt.plot(costs)</span><br><span class=\"line\">    plt.xlabel(<span class=\"string\">&#x27;iterations per 1&#x27;</span>)</span><br><span class=\"line\">    plt.ylabel(<span class=\"string\">&#x27;cost&#x27;</span>)</span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\">    <span class=\"comment\"># 保存学习后的参数</span></span><br><span class=\"line\">    torch.save(cnn.state_dict(), <span class=\"string\">&#x27;net_params.pkl&#x27;</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;参数已保存到本地pkl文件。&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是大概程序，这个神经网络有很多缺点，总结一下：</p>\n<ul>\n<li>算不上深层的神经网络，网络层数比较少，因为再深的话，我的GPU和内存都不够，解决方法我也想好了，我缩小了图片，可以说节省了部分资源，但还不够，我通道数可以使用1卷积进行调整，更好的缩小参数。</li>\n<li>对图片尺寸要求严格，我没有使用正方形大小的图片，导致我只能使用 264 * 480大小的图片，我真的应该处理一下，上下加上灰条，成为正方形尺寸。</li>\n<li>虽然层数不多，但也出现了BP的通病，前几层学习能力不好，有时会出现梯度消失，这没办法，只能用残差网络来解决这个问题，但这样的话我需要重新搭建整体结构。</li>\n</ul>\n","more":"<p>但由于期末考试，我没有时间去搭建，所以就暂时搁置了。但我一直没忘做这件事，考完试后，我直接开工。</p>\n<h2 id=\"数据集\"><a href=\"#数据集\" class=\"headerlink\" title=\"数据集\"></a>数据集</h2><p>首先必须识别一些东西，干脆识别人吧，这样就方便多了，我可以在一个视频里，每隔一秒截一张图，用来识别人物。</p>\n<p><img src=\"/2021/03/%E5%9F%BA%E4%BA%8EPytorch%E6%90%AD%E5%BB%BA%E7%9A%84%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/mg308c08c74b.gif\" alt=\"mg308c08c74b\"></p>\n<p>我就使用了生活大爆炸的一段视频，截取了好多好多谢耳朵的图片（毕竟这货太有特点了，不整整他感觉都对不起他一样）。</p>\n<p><img src=\"/2021/03/%E5%9F%BA%E4%BA%8EPytorch%E6%90%AD%E5%BB%BA%E7%9A%84%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/16064504838170893.jpg\" alt=\"16064504838170893\"></p>\n<p>我用了一个星期的时间，给图片进行了标定，一共有800多张，我保存在了一个压缩文件里（也就是<code>data.zip</code>文件），我还把图片缩小了原先的四分之一，也就是长宽各缩小一半。标注的数据放在了压缩文件中的<code>datas.json</code>文件里。</p>\n<p>到目前为止我有了数据集，而我需要一个程序用来调用这个数据集，我写了一个，保存在了<code>load_datas.py</code>文件中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zipfile</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bantch</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, path, number=<span class=\"number\">16</span></span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        制作一个列表进行分组</span></span><br><span class=\"line\"><span class=\"string\">        :param path: 文件地址</span></span><br><span class=\"line\"><span class=\"string\">        :param number: 分组个数</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.my_zip = zipfile.ZipFile(path)</span><br><span class=\"line\">        <span class=\"comment\"># 获得json文件</span></span><br><span class=\"line\">        file = self.my_zip.read(<span class=\"string\">&#x27;datas.json&#x27;</span>).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">        self.json_file = json.loads(file)</span><br><span class=\"line\">        file_name = self.my_zip.namelist()[<span class=\"number\">2</span>:]</span><br><span class=\"line\">        self.bantch = []</span><br><span class=\"line\">        mini = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, temp <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(file_name):</span><br><span class=\"line\">            mini.append(temp)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i % number == number - <span class=\"number\">1</span>:</span><br><span class=\"line\">                self.bantch.append(mini)</span><br><span class=\"line\">                <span class=\"keyword\">del</span> mini</span><br><span class=\"line\">                mini = []</span><br><span class=\"line\">        self.length = <span class=\"built_in\">len</span>(self.bantch)</span><br><span class=\"line\">        print(<span class=\"string\">&quot;总共分成&quot;</span>, self.length, <span class=\"string\">&quot;组，每组有&quot;</span>, number, <span class=\"string\">&quot;个&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__findJsonOfImage</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        检查此图片是否有对应的数据</span></span><br><span class=\"line\"><span class=\"string\">        :param name: 图片名</span></span><br><span class=\"line\"><span class=\"string\">        :return: 如果有会输出True和坐标，没有就输出False和None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 掐头去尾</span></span><br><span class=\"line\">        name = name[name.find(<span class=\"string\">&#x27;/&#x27;</span>) + <span class=\"number\">1</span>:name.rfind(<span class=\"string\">&#x27;.&#x27;</span>)]</span><br><span class=\"line\">        <span class=\"comment\"># 尝试读取一下</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            x1 = self.json_file[name][<span class=\"string\">&#x27;xmin&#x27;</span>]</span><br><span class=\"line\">            x2 = self.json_file[name][<span class=\"string\">&#x27;xmax&#x27;</span>]</span><br><span class=\"line\">            y1 = self.json_file[name][<span class=\"string\">&#x27;ymin&#x27;</span>]</span><br><span class=\"line\">            y2 = self.json_file[name][<span class=\"string\">&#x27;ymax&#x27;</span>]</span><br><span class=\"line\">            temp = (x1, y1), (x2, y2)</span><br><span class=\"line\">            flag = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 看来是读取失败了</span></span><br><span class=\"line\">            temp = <span class=\"literal\">None</span></span><br><span class=\"line\">            flag = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag, temp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readOneImage</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        获取图片</span></span><br><span class=\"line\"><span class=\"string\">        :param name: 图片名</span></span><br><span class=\"line\"><span class=\"string\">        :param my_zip: 压缩文件</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        image = self.my_zip.read(name)</span><br><span class=\"line\">        image = cv2.imdecode(np.array(<span class=\"built_in\">bytearray</span>(image), dtype=<span class=\"string\">&#x27;uint8&#x27;</span>), cv2.IMREAD_UNCHANGED)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> image</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load</span>(<span class=\"params\">self, number, mode=<span class=\"literal\">False</span></span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        加载一组图片</span></span><br><span class=\"line\"><span class=\"string\">        :param group: 文件组</span></span><br><span class=\"line\"><span class=\"string\">        :param number: 加载第几组</span></span><br><span class=\"line\"><span class=\"string\">        :param mode: 是否开启仿yolo模式</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        image_list = []</span><br><span class=\"line\">        data_list = []</span><br><span class=\"line\">        <span class=\"comment\"># 获取所有图片名</span></span><br><span class=\"line\">        file_name = self.bantch[number]</span><br><span class=\"line\">        <span class=\"comment\"># 遍历所有文件</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, name <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(file_name):</span><br><span class=\"line\">            <span class=\"comment\"># 获取信息</span></span><br><span class=\"line\">            flag, temp = self.__findJsonOfImage(name)</span><br><span class=\"line\">            <span class=\"comment\"># 获取图片</span></span><br><span class=\"line\">            image = self.readOneImage(name)</span><br><span class=\"line\">            <span class=\"comment\"># 整治数据</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">                <span class=\"comment\"># 如果有”框“</span></span><br><span class=\"line\">                (x1, y1), (x2, y2) = temp</span><br><span class=\"line\">                <span class=\"keyword\">if</span> mode:</span><br><span class=\"line\">                    <span class=\"comment\"># 此模式模仿yolo</span></span><br><span class=\"line\">                    x = (x1 + x2) // <span class=\"number\">2</span></span><br><span class=\"line\">                    y = (y1 + y2) // <span class=\"number\">2</span></span><br><span class=\"line\">                    w = <span class=\"built_in\">abs</span>(x1 - x2)</span><br><span class=\"line\">                    h = <span class=\"built_in\">abs</span>(y1 - y2)</span><br><span class=\"line\">                    <span class=\"comment\"># 加入一个数据</span></span><br><span class=\"line\">                    <span class=\"comment\"># 格式：[物体置信度，列，行，高，宽]</span></span><br><span class=\"line\">                    data_list.append([<span class=\"number\">1</span>, x, y, h, w])</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># 此模式输出框的左上角和左下角两个点</span></span><br><span class=\"line\">                    data_list.append([<span class=\"number\">1</span>, x1, y1, x2, y2])</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 没有”框“了</span></span><br><span class=\"line\">                <span class=\"comment\"># 除了物体置信度，其他数就瞎填吧</span></span><br><span class=\"line\">                data_list.append([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"comment\"># 将图片存进列表中</span></span><br><span class=\"line\">            image_list.append(image)</span><br><span class=\"line\">        <span class=\"comment\"># 整合成numpy数组</span></span><br><span class=\"line\">        <span class=\"comment\"># 维度解释（2维度）：（样本数，输出特征个数）</span></span><br><span class=\"line\">        data_list = np.array(data_list)</span><br><span class=\"line\">        <span class=\"comment\"># 维度解释（4维度）：（样本数，图片高，图片宽，通道数）</span></span><br><span class=\"line\">        image_list = np.array(image_list)</span><br><span class=\"line\">        image_list = np.transpose(image_list, (<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">        image_list, data_list = self.deal(image_list, data_list)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> image_list, data_list</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal</span>(<span class=\"params\">self, image_list, data_list</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        数据处理：图片归一化，数据后面四个缩小100分之一</span></span><br><span class=\"line\"><span class=\"string\">        :param image_list: 一组图片</span></span><br><span class=\"line\"><span class=\"string\">        :param data_list: 一组数据</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        data_list_1 = data_list[:, <span class=\"number\">0</span>].reshape(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        data_list_2 = data_list[:, <span class=\"number\">1</span>:] / <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"comment\"># 拼接恢复</span></span><br><span class=\"line\">        data_list = np.hstack((data_list_1, data_list_2))</span><br><span class=\"line\">        <span class=\"comment\"># 灰度归一化，并转换成张量</span></span><br><span class=\"line\">        train_image_list = (torch.from_numpy(image_list) / <span class=\"number\">255.</span>)</span><br><span class=\"line\">        train_data_list = torch.from_numpy(data_list)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> train_image_list, train_data_list</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resume</span>(<span class=\"params\">self, data_list</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        数据恢复</span></span><br><span class=\"line\"><span class=\"string\">        :param data_list: 一组数据</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        num = <span class=\"built_in\">len</span>(data_list.size())</span><br><span class=\"line\">        <span class=\"keyword\">if</span> num == <span class=\"number\">2</span>:</span><br><span class=\"line\">            data = (data_list * <span class=\"number\">100</span>).detach().numpy()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">&quot;出现错误，强制结束&quot;</span>)</span><br><span class=\"line\">            exit()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">image</span>(<span class=\"params\">self, name=<span class=\"literal\">None</span>, group=<span class=\"literal\">None</span>, number=<span class=\"literal\">None</span>, mode=<span class=\"literal\">False</span></span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        加载一张原图片</span></span><br><span class=\"line\"><span class=\"string\">        :param name:</span></span><br><span class=\"line\"><span class=\"string\">        :param group:</span></span><br><span class=\"line\"><span class=\"string\">        :param number:</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name == <span class=\"literal\">None</span> <span class=\"keyword\">and</span> group != <span class=\"literal\">None</span> <span class=\"keyword\">and</span> number != <span class=\"literal\">None</span>:</span><br><span class=\"line\">            new_name = self.bantch[group][number]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name != <span class=\"literal\">None</span> <span class=\"keyword\">and</span> group == <span class=\"literal\">None</span> <span class=\"keyword\">and</span> number == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            new_name = name</span><br><span class=\"line\">        img = self.readOneImage(new_name)</span><br><span class=\"line\">        flag, data = self.__findJsonOfImage(new_name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">            <span class=\"comment\"># 如果有”框“</span></span><br><span class=\"line\">            (x1, y1), (x2, y2) = data</span><br><span class=\"line\">            <span class=\"keyword\">if</span> mode:</span><br><span class=\"line\">                <span class=\"comment\"># 此模式模仿yolo</span></span><br><span class=\"line\">                x = (x1 + x2) // <span class=\"number\">2</span></span><br><span class=\"line\">                y = (y1 + y2) // <span class=\"number\">2</span></span><br><span class=\"line\">                w = <span class=\"built_in\">abs</span>(x1 - x2)</span><br><span class=\"line\">                h = <span class=\"built_in\">abs</span>(y1 - y2)</span><br><span class=\"line\">                <span class=\"comment\"># 加入一个数据</span></span><br><span class=\"line\">                <span class=\"comment\"># 格式：[物体置信度，列，行，高，宽]</span></span><br><span class=\"line\">                data = [<span class=\"number\">1</span>, x, y, h, w]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                data = [<span class=\"number\">1</span>, x1, y1, x2, y2]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            data = [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> img, data</span><br></pre></td></tr></table></figure>\n<p>我在这个程序中，提供了两种模式，默认是仿yolo的模式，也就是一个置信度，一个坐标，方框的长和宽，总共五个数据。</p>\n<h2 id=\"模型搭建\"><a href=\"#模型搭建\" class=\"headerlink\" title=\"模型搭建\"></a>模型搭建</h2><p>我没用花里胡哨的方式，直接搭建了一个，三层卷积层用来提取特征，三层全连接层。基本一看就能看懂：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> gc</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> network.model <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CNN</span>(<span class=\"params\">nn.Module</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(CNN, self).__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># nn.Sequential是一个有序的容器，神经网络模块将按照在传入构造器的顺序依次被添加到计算图中执行，同时以神经网络模块为元素的有序字典也可以作为传入参数。</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里nn.Sequential里面加入了[卷积,ReLU，池化]三部分</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 一些设置</span></span><br><span class=\"line\">        in_channels = <span class=\"number\">3</span>                 <span class=\"comment\"># input通道数</span></span><br><span class=\"line\">        out_channels = <span class=\"number\">16</span>               <span class=\"comment\"># output通道数</span></span><br><span class=\"line\">        kernel_size = <span class=\"number\">3</span>                 <span class=\"comment\"># 卷积核的边长</span></span><br><span class=\"line\">        pool_size = <span class=\"number\">3</span>                   <span class=\"comment\"># 池化尺寸</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.conv_1 = Conv(in_channels, out_channels, kernel_size, pool_size)</span><br><span class=\"line\">        h,w = comput_size(<span class=\"number\">264</span>, <span class=\"number\">480</span>, kernel_size, pool_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 一些设置</span></span><br><span class=\"line\">        in_channels = out_channels      <span class=\"comment\"># input通道数</span></span><br><span class=\"line\">        out_channels = <span class=\"number\">32</span>               <span class=\"comment\"># output通道数</span></span><br><span class=\"line\">        kernel_size = <span class=\"number\">3</span>                 <span class=\"comment\"># 卷积核的边长</span></span><br><span class=\"line\">        pool_size = <span class=\"number\">3</span>                   <span class=\"comment\"># 池化尺寸</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.conv_2 = Conv(in_channels, out_channels, kernel_size, pool_size)</span><br><span class=\"line\">        h, w = comput_size(h,w, kernel_size, pool_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 一些设置</span></span><br><span class=\"line\">        in_channels = out_channels      <span class=\"comment\"># input通道数</span></span><br><span class=\"line\">        out_channels = <span class=\"number\">64</span>               <span class=\"comment\"># output通道数</span></span><br><span class=\"line\">        kernel_size = <span class=\"number\">3</span>                 <span class=\"comment\"># 卷积核的边长</span></span><br><span class=\"line\">        pool_size = <span class=\"number\">3</span>                   <span class=\"comment\"># 池化尺寸</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.conv_3 = Conv(in_channels, out_channels, kernel_size, pool_size)</span><br><span class=\"line\">        h, w = comput_size(h, w, kernel_size, pool_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 一些设置</span></span><br><span class=\"line\">        in_channels = out_channels * h * w  <span class=\"comment\"># input通道数</span></span><br><span class=\"line\">        out_channels = in_channels // <span class=\"number\">8</span>    <span class=\"comment\"># output通道数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.line_1 = Line(in_channels, out_channels)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 一些设置</span></span><br><span class=\"line\">        in_channels = out_channels          <span class=\"comment\"># input通道数</span></span><br><span class=\"line\">        out_channels = in_channels // <span class=\"number\">8</span>    <span class=\"comment\"># output通道数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.line_2 = Line(in_channels, out_channels)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 一些设置</span></span><br><span class=\"line\">        in_channels = out_channels          <span class=\"comment\"># input通道数</span></span><br><span class=\"line\">        out_channels = in_channels // <span class=\"number\">8</span>    <span class=\"comment\"># output通道数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.line_3 = Line(in_channels, out_channels)</span><br><span class=\"line\"></span><br><span class=\"line\">        in_channels = out_channels  <span class=\"comment\"># input通道数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.end = End(in_channels)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 实例化损失函数（交叉熵）</span></span><br><span class=\"line\">        self.loss = nn.MSELoss()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span>(<span class=\"params\">self, x</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        x = self.conv_1(x)</span><br><span class=\"line\">        x = self.conv_2(x)</span><br><span class=\"line\">        x = self.conv_3(x)</span><br><span class=\"line\">        x = x.reshape(x.size(<span class=\"number\">0</span>), -<span class=\"number\">1</span>)</span><br><span class=\"line\">        x = self.line_1(x)</span><br><span class=\"line\">        x = self.line_2(x)</span><br><span class=\"line\">        x = self.line_3(x)</span><br><span class=\"line\">        x = self.end(x)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型\"><a href=\"#训练模型\" class=\"headerlink\" title=\"训练模型\"></a>训练模型</h2><p>训练的方式是我自己单独写的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datas.load_datas <span class=\"keyword\">import</span> Bantch</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myCNN</span>(<span class=\"params\">path,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          GPU=<span class=\"literal\">False</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          learning_rate=<span class=\"number\">0.0009</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          num_epochs=<span class=\"number\">200</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          minibatch_size=<span class=\"number\">8</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cnn = CNN()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> GPU:</span><br><span class=\"line\">        print(<span class=\"string\">&quot;正在将神经网络放入GPU中...&quot;</span>)</span><br><span class=\"line\">        cnn = cnn.cuda()</span><br><span class=\"line\">        print(<span class=\"string\">&quot;神经网络已经成功放入GPU\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train = Bantch(path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 批次数量</span></span><br><span class=\"line\">    num_batch = train.length</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 清理一次</span></span><br><span class=\"line\">    gc.collect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 使用动量下降</span></span><br><span class=\"line\">    optimizer = torch.optim.Adam(cnn.parameters(), lr=learning_rate, betas=(<span class=\"number\">0.9</span>, <span class=\"number\">0.999</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 保存每次迭代的cost的列表</span></span><br><span class=\"line\">    costs = []</span><br><span class=\"line\">    start = datetime.datetime.now()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 开始num_epochs次数次下降</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_epochs):</span><br><span class=\"line\">        epoch_cost = <span class=\"number\">0</span></span><br><span class=\"line\">        now = datetime.datetime.now()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> step <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_batch):</span><br><span class=\"line\">            <span class=\"comment\"># 加载一组图片</span></span><br><span class=\"line\"></span><br><span class=\"line\">            batch_x, batch_y = train.load(step, mode=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> GPU:</span><br><span class=\"line\">                <span class=\"comment\"># print(&quot;正在将 第&quot;, step, &quot;组 mini bantch 放入GPU中...&quot;)</span></span><br><span class=\"line\">                batch_x = batch_x.cuda()</span><br><span class=\"line\">                batch_y = batch_y.cuda()</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 清理一次</span></span><br><span class=\"line\">                gc.collect()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 前向传播</span></span><br><span class=\"line\">            output = cnn(batch_x)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 计算一次mini_batch成本</span></span><br><span class=\"line\">            cost = cnn.loss(output, batch_y.<span class=\"built_in\">float</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 将一套mini_batch成本进行平均</span></span><br><span class=\"line\">            epoch_cost += cost / num_batch</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 梯度归零</span></span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 反向传播</span></span><br><span class=\"line\">            cost.backward()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 更新参数</span></span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 清理一次</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> epoch % <span class=\"number\">1</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            costs.append(epoch_cost)</span><br><span class=\"line\">            new = datetime.datetime.now()</span><br><span class=\"line\">            time = new - now</span><br><span class=\"line\">            time_all = time * (num_epochs - epoch)</span><br><span class=\"line\">            have_time = new - start</span><br><span class=\"line\">            print(<span class=\"string\">&quot;已经运行了&quot;</span>, have_time, <span class=\"string\">&quot;，预计&quot;</span>, time_all, <span class=\"string\">&quot;后结束&quot;</span>)</span><br><span class=\"line\">            print(<span class=\"string\">&#x27;Cost after epoch %i : %f&#x27;</span> % (epoch, epoch_cost), <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 画学习曲线</span></span><br><span class=\"line\">    plt.plot(costs)</span><br><span class=\"line\">    plt.xlabel(<span class=\"string\">&#x27;iterations per 1&#x27;</span>)</span><br><span class=\"line\">    plt.ylabel(<span class=\"string\">&#x27;cost&#x27;</span>)</span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\">    <span class=\"comment\"># 保存学习后的参数</span></span><br><span class=\"line\">    torch.save(cnn.state_dict(), <span class=\"string\">&#x27;net_params.pkl&#x27;</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;参数已保存到本地pkl文件。&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是大概程序，这个神经网络有很多缺点，总结一下：</p>\n<ul>\n<li>算不上深层的神经网络，网络层数比较少，因为再深的话，我的GPU和内存都不够，解决方法我也想好了，我缩小了图片，可以说节省了部分资源，但还不够，我通道数可以使用1卷积进行调整，更好的缩小参数。</li>\n<li>对图片尺寸要求严格，我没有使用正方形大小的图片，导致我只能使用 264 * 480大小的图片，我真的应该处理一下，上下加上灰条，成为正方形尺寸。</li>\n<li>虽然层数不多，但也出现了BP的通病，前几层学习能力不好，有时会出现梯度消失，这没办法，只能用残差网络来解决这个问题，但这样的话我需要重新搭建整体结构。</li>\n</ul>","categories":[{"name":"人工智能","path":"api/categories/人工智能.json"}],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"深度学习","path":"api/tags/深度学习.json"}]}