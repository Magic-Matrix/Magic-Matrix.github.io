{"title":"利用图片加密数据","slug":"利用图片加密数据","date":"2021-07-16T08:07:39.000Z","updated":"2021-10-16T08:55:11.081Z","comments":true,"path":"api/articles/利用图片加密数据.json","excerpt":null,"covers":["/2021/07/%E5%88%A9%E7%94%A8%E5%9B%BE%E7%89%87%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE/image.jpg"],"content":"<p>最近玩了一个很有意思的操作，直接把数据存放在图片中，这种算法有很多种，今天就说一种加密算法。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>首先需要知道像素，有一张三通道的彩色图片，也就是一个 三个维度的矩阵，每个元素的数字的范围是 0~255，很简单，是一个 8 位二进制的数字，总而言言之，每个像素是一个8位的数字。</p>\n<p>三个数值可以直接构成一个像素颜色，也就是RGB（Opencv是使用的BGR，无影响）。那就请看下面的图：</p>\n<p><img src=\"/2021/07/%E5%88%A9%E7%94%A8%E5%9B%BE%E7%89%87%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE/image.jpg\" alt=\"image\"></p>\n<p>你能看出左右红色有什么区别吗？反正我是看不出来，实际上在红色分量上左边是255、右边是254，仅仅差了1，也就是说相差1基本看不出来变化。</p>\n<p>那么把八位的数据拆开，<strong>最后一位是0是1都不会影响颜色太大变化</strong>，因为仅仅相差1。</p>\n<p>所以算法就出来了，首先，把一张图片的所有像素的最后一位变成0，这样肉眼是观查不出问题的。然后我们把需要加密的信息重新拆成二进制形式，补充到最后一位上，还是不会看出来（反正我是看不出来）。</p>\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><p>我也写出来了这部分程序：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageData</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, path: <span class=\"built_in\">str</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 读取图片</span></span><br><span class=\"line\">        self.imageRead(path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__makeHead</span>(<span class=\"params\">self, length: <span class=\"built_in\">int</span></span>) -&gt; list:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        制作头部数据</span></span><br><span class=\"line\"><span class=\"string\">        :param length: 数据长度</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 数据长度的字节数量，默认成4字节，我感觉足够了</span></span><br><span class=\"line\">        data_max_size = <span class=\"number\">4</span></span><br><span class=\"line\">        <span class=\"comment\"># 头数据长度，默认32字节</span></span><br><span class=\"line\">        head_size = <span class=\"number\">32</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 两次判断能否放下数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> length + head_size &gt; (<span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">8</span> * data_max_size)):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\">        <span class=\"keyword\">if</span> length + head_size &gt; self.size[<span class=\"number\">0</span>] * self.size[<span class=\"number\">1</span>] * self.size[<span class=\"number\">2</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 转换成列表</span></span><br><span class=\"line\">        bin_str = <span class=\"built_in\">list</span>(<span class=\"built_in\">bin</span>(length)[<span class=\"number\">2</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 校验标志</span></span><br><span class=\"line\">        bin_num0 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 校验标志</span></span><br><span class=\"line\">        bin_num1 = [<span class=\"built_in\">ord</span>(num_str) - <span class=\"number\">48</span> <span class=\"keyword\">for</span> num_str <span class=\"keyword\">in</span> bin_str]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 数据长度的补充</span></span><br><span class=\"line\">        bin_num2 = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> tem <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span> * data_max_size - <span class=\"built_in\">len</span>(bin_num1))]</span><br><span class=\"line\"></span><br><span class=\"line\">        bin_num3 = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> tem <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span> * <span class=\"number\">27</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        head = bin_num0 + bin_num2 + bin_num1 + bin_num3</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__binToNumber</span>(<span class=\"params\">self, datas: np.ndarray</span>) -&gt; list:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        二进制矩阵转换成十进制列表</span></span><br><span class=\"line\"><span class=\"string\">        :param datas: 二进制矩阵</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 读取出数据</span></span><br><span class=\"line\">        data = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> tem <span class=\"keyword\">in</span> datas:</span><br><span class=\"line\">            num = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> tem2 <span class=\"keyword\">in</span> tem:</span><br><span class=\"line\">                num = num &lt;&lt; <span class=\"number\">1</span></span><br><span class=\"line\">                num += tem2</span><br><span class=\"line\">            data.append(num)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">saveData</span>(<span class=\"params\">self, numbers: <span class=\"built_in\">list</span></span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        将数据藏在图片中</span></span><br><span class=\"line\"><span class=\"string\">        :param numbers: 数据列表</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 计算长度</span></span><br><span class=\"line\">        length = <span class=\"built_in\">len</span>(numbers)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 设定数据头部</span></span><br><span class=\"line\">        head = self.__makeHead(length)</span><br><span class=\"line\"></span><br><span class=\"line\">        new_numbers = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 数据离散</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">            <span class=\"comment\"># 转换成列表</span></span><br><span class=\"line\">            bin_list = [(number &gt;&gt; i) &amp; <span class=\"number\">1</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>)][::-<span class=\"number\">1</span>]</span><br><span class=\"line\">            new_numbers += bin_list</span><br><span class=\"line\"></span><br><span class=\"line\">        new_numbers = head + new_numbers</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        numbers_1 = np.array(new_numbers, dtype=<span class=\"string\">&#x27;uint8&#x27;</span>)</span><br><span class=\"line\">        numbers_2 = np.zeros(self.size[<span class=\"number\">0</span>] * self.size[<span class=\"number\">1</span>] * self.size[<span class=\"number\">2</span>] - numbers_1.shape[<span class=\"number\">0</span>], dtype=<span class=\"string\">&#x27;uint8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        data = np.concatenate((numbers_1, numbers_2)).reshape(self.size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 擦除旧数据</span></span><br><span class=\"line\">        self.cleanData()</span><br><span class=\"line\">        self.image += data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loadData</span>(<span class=\"params\">self</span>) -&gt; tuple:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        读取藏在图片中的数据</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得初始的矩阵</span></span><br><span class=\"line\">        data_matrix: np.ndarray = self.image &amp; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 展平</span></span><br><span class=\"line\">        data_matrix = data_matrix.reshape(-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 大小</span></span><br><span class=\"line\">        max_length = data_matrix.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 去掉无效的部分获得的的长度</span></span><br><span class=\"line\">        max_length = max_length - (max_length % <span class=\"number\">8</span>)</span><br><span class=\"line\">        data_matrix = data_matrix[:max_length]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 8个位一组</span></span><br><span class=\"line\">        data_matrix = data_matrix.reshape((-<span class=\"number\">1</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        head_matrix = data_matrix[<span class=\"number\">0</span>:<span class=\"number\">32</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 读取出头部信息</span></span><br><span class=\"line\">        head = self.__binToNumber(head_matrix)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 提取出数据总长度</span></span><br><span class=\"line\">        length = head[<span class=\"number\">4</span>] + (head[<span class=\"number\">3</span>] &lt;&lt; <span class=\"number\">8</span>) + (head[<span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">16</span>) + (head[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">24</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        data_matrix = data_matrix[<span class=\"number\">32</span>:<span class=\"number\">32</span> + length]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 读取出数据</span></span><br><span class=\"line\">        data = self.__binToNumber(data_matrix)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head, data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cleanData</span>(<span class=\"params\">self</span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        清楚图片中的数据</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.image = self.image &amp; <span class=\"number\">0xfe</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">imageRead</span>(<span class=\"params\">self, path: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        读取图片</span></span><br><span class=\"line\"><span class=\"string\">        :param path: 读取图片的路径</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 读取图片</span></span><br><span class=\"line\">        image = cv2.imread(path)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.size = image.shape</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 图片转换RGB</span></span><br><span class=\"line\">        self.image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">imageSave</span>(<span class=\"params\">self, path: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        保存图片</span></span><br><span class=\"line\"><span class=\"string\">        :param path: 保存图片的路径</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        image = cv2.cvtColor(self.image, cv2.COLOR_RGB2BGR)</span><br><span class=\"line\">        cv2.imwrite(path, image)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">imageShow</span>(<span class=\"params\">self</span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        显示图片</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        cv2.imshow(<span class=\"string\">&quot;image&quot;</span>, self.image)</span><br><span class=\"line\"></span><br><span class=\"line\">        cv2.waitKey(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        cv2.destroyAllWindows()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    image = ImageData(<span class=\"string\">&quot;pycharm.png&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    image.saveData([<span class=\"number\">178</span>, <span class=\"number\">255</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    head, data = image.loadData()</span><br><span class=\"line\"></span><br><span class=\"line\">    image.imageSave(<span class=\"string\">&quot;a.png&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>程序有点长，我简单说一下作用。</p>\n<p>首先我封装成了一个类<code>ImageData</code>，构造函数只有一个参数，就是图片的路径，可以直接加载本地图片。</p>\n<p>加载进图片之后，图片会处于<code>ImageData</code>实例化的对象中，也可以再使用<code>imageRead</code>方法重新加载图片，也可以使用<code>imageSave</code>方法保存该对象中的图片。我也写了一个显示的方法<code>imageShow</code>，直接使用可以直接查看。</p>\n<p>接下来是关于数据的方法：</p>\n<ul>\n<li><code>cleanData</code>方法用于清除图片中的数据，也就是直接将像素中的8位二进制数字的最后一位直接变成0。</li>\n<li><code>saveData</code>方法是将一个列表中的数字藏进图片中，但数字只能是8位二进制数字，有特殊需求可以直接去修改。</li>\n<li><code>loadData</code>方法会返回图片中的数字，会返回两个值，第一个是相关信息，第二个才是隐藏的数据。</li>\n</ul>\n","more":"<p>最近玩了一个很有意思的操作，直接把数据存放在图片中，这种算法有很多种，今天就说一种加密算法。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>首先需要知道像素，有一张三通道的彩色图片，也就是一个 三个维度的矩阵，每个元素的数字的范围是 0~255，很简单，是一个 8 位二进制的数字，总而言言之，每个像素是一个8位的数字。</p>\n<p>三个数值可以直接构成一个像素颜色，也就是RGB（Opencv是使用的BGR，无影响）。那就请看下面的图：</p>\n<p><img src=\"/2021/07/%E5%88%A9%E7%94%A8%E5%9B%BE%E7%89%87%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE/image.jpg\" alt=\"image\"></p>\n<p>你能看出左右红色有什么区别吗？反正我是看不出来，实际上在红色分量上左边是255、右边是254，仅仅差了1，也就是说相差1基本看不出来变化。</p>\n<p>那么把八位的数据拆开，<strong>最后一位是0是1都不会影响颜色太大变化</strong>，因为仅仅相差1。</p>\n<p>所以算法就出来了，首先，把一张图片的所有像素的最后一位变成0，这样肉眼是观查不出问题的。然后我们把需要加密的信息重新拆成二进制形式，补充到最后一位上，还是不会看出来（反正我是看不出来）。</p>\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><p>我也写出来了这部分程序：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageData</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, path: <span class=\"built_in\">str</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 读取图片</span></span><br><span class=\"line\">        self.imageRead(path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__makeHead</span>(<span class=\"params\">self, length: <span class=\"built_in\">int</span></span>) -&gt; list:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        制作头部数据</span></span><br><span class=\"line\"><span class=\"string\">        :param length: 数据长度</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 数据长度的字节数量，默认成4字节，我感觉足够了</span></span><br><span class=\"line\">        data_max_size = <span class=\"number\">4</span></span><br><span class=\"line\">        <span class=\"comment\"># 头数据长度，默认32字节</span></span><br><span class=\"line\">        head_size = <span class=\"number\">32</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 两次判断能否放下数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> length + head_size &gt; (<span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">8</span> * data_max_size)):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\">        <span class=\"keyword\">if</span> length + head_size &gt; self.size[<span class=\"number\">0</span>] * self.size[<span class=\"number\">1</span>] * self.size[<span class=\"number\">2</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 转换成列表</span></span><br><span class=\"line\">        bin_str = <span class=\"built_in\">list</span>(<span class=\"built_in\">bin</span>(length)[<span class=\"number\">2</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 校验标志</span></span><br><span class=\"line\">        bin_num0 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 校验标志</span></span><br><span class=\"line\">        bin_num1 = [<span class=\"built_in\">ord</span>(num_str) - <span class=\"number\">48</span> <span class=\"keyword\">for</span> num_str <span class=\"keyword\">in</span> bin_str]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 数据长度的补充</span></span><br><span class=\"line\">        bin_num2 = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> tem <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span> * data_max_size - <span class=\"built_in\">len</span>(bin_num1))]</span><br><span class=\"line\"></span><br><span class=\"line\">        bin_num3 = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> tem <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span> * <span class=\"number\">27</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        head = bin_num0 + bin_num2 + bin_num1 + bin_num3</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__binToNumber</span>(<span class=\"params\">self, datas: np.ndarray</span>) -&gt; list:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        二进制矩阵转换成十进制列表</span></span><br><span class=\"line\"><span class=\"string\">        :param datas: 二进制矩阵</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 读取出数据</span></span><br><span class=\"line\">        data = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> tem <span class=\"keyword\">in</span> datas:</span><br><span class=\"line\">            num = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> tem2 <span class=\"keyword\">in</span> tem:</span><br><span class=\"line\">                num = num &lt;&lt; <span class=\"number\">1</span></span><br><span class=\"line\">                num += tem2</span><br><span class=\"line\">            data.append(num)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">saveData</span>(<span class=\"params\">self, numbers: <span class=\"built_in\">list</span></span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        将数据藏在图片中</span></span><br><span class=\"line\"><span class=\"string\">        :param numbers: 数据列表</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 计算长度</span></span><br><span class=\"line\">        length = <span class=\"built_in\">len</span>(numbers)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 设定数据头部</span></span><br><span class=\"line\">        head = self.__makeHead(length)</span><br><span class=\"line\"></span><br><span class=\"line\">        new_numbers = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 数据离散</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">            <span class=\"comment\"># 转换成列表</span></span><br><span class=\"line\">            bin_list = [(number &gt;&gt; i) &amp; <span class=\"number\">1</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>)][::-<span class=\"number\">1</span>]</span><br><span class=\"line\">            new_numbers += bin_list</span><br><span class=\"line\"></span><br><span class=\"line\">        new_numbers = head + new_numbers</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        numbers_1 = np.array(new_numbers, dtype=<span class=\"string\">&#x27;uint8&#x27;</span>)</span><br><span class=\"line\">        numbers_2 = np.zeros(self.size[<span class=\"number\">0</span>] * self.size[<span class=\"number\">1</span>] * self.size[<span class=\"number\">2</span>] - numbers_1.shape[<span class=\"number\">0</span>], dtype=<span class=\"string\">&#x27;uint8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        data = np.concatenate((numbers_1, numbers_2)).reshape(self.size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 擦除旧数据</span></span><br><span class=\"line\">        self.cleanData()</span><br><span class=\"line\">        self.image += data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loadData</span>(<span class=\"params\">self</span>) -&gt; tuple:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        读取藏在图片中的数据</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得初始的矩阵</span></span><br><span class=\"line\">        data_matrix: np.ndarray = self.image &amp; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 展平</span></span><br><span class=\"line\">        data_matrix = data_matrix.reshape(-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 大小</span></span><br><span class=\"line\">        max_length = data_matrix.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 去掉无效的部分获得的的长度</span></span><br><span class=\"line\">        max_length = max_length - (max_length % <span class=\"number\">8</span>)</span><br><span class=\"line\">        data_matrix = data_matrix[:max_length]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 8个位一组</span></span><br><span class=\"line\">        data_matrix = data_matrix.reshape((-<span class=\"number\">1</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        head_matrix = data_matrix[<span class=\"number\">0</span>:<span class=\"number\">32</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 读取出头部信息</span></span><br><span class=\"line\">        head = self.__binToNumber(head_matrix)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 提取出数据总长度</span></span><br><span class=\"line\">        length = head[<span class=\"number\">4</span>] + (head[<span class=\"number\">3</span>] &lt;&lt; <span class=\"number\">8</span>) + (head[<span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">16</span>) + (head[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">24</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        data_matrix = data_matrix[<span class=\"number\">32</span>:<span class=\"number\">32</span> + length]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 读取出数据</span></span><br><span class=\"line\">        data = self.__binToNumber(data_matrix)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head, data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cleanData</span>(<span class=\"params\">self</span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        清楚图片中的数据</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.image = self.image &amp; <span class=\"number\">0xfe</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">imageRead</span>(<span class=\"params\">self, path: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        读取图片</span></span><br><span class=\"line\"><span class=\"string\">        :param path: 读取图片的路径</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 读取图片</span></span><br><span class=\"line\">        image = cv2.imread(path)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.size = image.shape</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 图片转换RGB</span></span><br><span class=\"line\">        self.image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">imageSave</span>(<span class=\"params\">self, path: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        保存图片</span></span><br><span class=\"line\"><span class=\"string\">        :param path: 保存图片的路径</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        image = cv2.cvtColor(self.image, cv2.COLOR_RGB2BGR)</span><br><span class=\"line\">        cv2.imwrite(path, image)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">imageShow</span>(<span class=\"params\">self</span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        显示图片</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        cv2.imshow(<span class=\"string\">&quot;image&quot;</span>, self.image)</span><br><span class=\"line\"></span><br><span class=\"line\">        cv2.waitKey(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        cv2.destroyAllWindows()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    image = ImageData(<span class=\"string\">&quot;pycharm.png&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    image.saveData([<span class=\"number\">178</span>, <span class=\"number\">255</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    head, data = image.loadData()</span><br><span class=\"line\"></span><br><span class=\"line\">    image.imageSave(<span class=\"string\">&quot;a.png&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>程序有点长，我简单说一下作用。</p>\n<p>首先我封装成了一个类<code>ImageData</code>，构造函数只有一个参数，就是图片的路径，可以直接加载本地图片。</p>\n<p>加载进图片之后，图片会处于<code>ImageData</code>实例化的对象中，也可以再使用<code>imageRead</code>方法重新加载图片，也可以使用<code>imageSave</code>方法保存该对象中的图片。我也写了一个显示的方法<code>imageShow</code>，直接使用可以直接查看。</p>\n<p>接下来是关于数据的方法：</p>\n<ul>\n<li><code>cleanData</code>方法用于清除图片中的数据，也就是直接将像素中的8位二进制数字的最后一位直接变成0。</li>\n<li><code>saveData</code>方法是将一个列表中的数字藏进图片中，但数字只能是8位二进制数字，有特殊需求可以直接去修改。</li>\n<li><code>loadData</code>方法会返回图片中的数字，会返回两个值，第一个是相关信息，第二个才是隐藏的数据。</li>\n</ul>\n","categories":[{"name":"奇妙的原理","path":"api/categories/奇妙的原理.json"}],"tags":[{"name":"原理","path":"api/tags/原理.json"},{"name":"python","path":"api/tags/python.json"},{"name":"图像处理","path":"api/tags/图像处理.json"}]}