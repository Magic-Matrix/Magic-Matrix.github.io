{"title":"Java多线程并发","slug":"Java多线程并发","date":"2021-07-11T05:40:35.000Z","updated":"2021-10-16T08:11:29.471Z","comments":true,"path":"api/articles/Java多线程并发.json","excerpt":null,"covers":["/2021/07/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/1631189204.png"],"content":"<h2 id=\"一些基本概念\"><a href=\"#一些基本概念\" class=\"headerlink\" title=\"一些基本概念\"></a>一些基本概念</h2><p>为了防止单个程序发生阻塞的现象，所以必须使用多线程或进程来解决此类问题。</p>\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><p>在操作系统中运行的的程序会占用一个进程，进程主要在执行一个程序的过程中，系统会分配给的一些资源给此进程进行执行一些程序，主要针对于硬件产生的一种并发。</p>\n<p>是系统资源分配的基本单位。</p>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><p>一个进程中会分配多个线程，用来是提高某个程序高并发运行。</p>\n<p>是CPU调度和执行的基本单位，真正多线程是多个CPU（多核）共同执行。</p>\n<h2 id=\"创建线程\"><a href=\"#创建线程\" class=\"headerlink\" title=\"创建线程\"></a>创建线程</h2><p>三种方式：</p>\n<ul>\n<li>继承<code>Thread</code>类（重点）</li>\n<li>使用<code>Runnable</code>接口（重点）</li>\n<li>使用<code>Callable</code>接口（了解）</li>\n</ul>\n<h3 id=\"继承Thread类\"><a href=\"#继承Thread类\" class=\"headerlink\" title=\"继承Thread类\"></a>继承<code>Thread</code>类</h3><p>步骤：</p>\n<ol>\n<li>继承<code>Thread</code>类，重写<code>run</code>方法</li>\n<li>实例化对象，使用<code>start()</code>方法启动</li>\n</ol>\n<p>测试：</p>\n<p>线程1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thread_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread_1&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>线程2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thread_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread_2&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主线程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> other.Thread_1;</span><br><span class=\"line\"><span class=\"keyword\">import</span> other.Thread_2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread_1 thread1 = <span class=\"keyword\">new</span> Thread_1();</span><br><span class=\"line\">        Thread_2 thread2 = <span class=\"keyword\">new</span> Thread_2();</span><br><span class=\"line\"></span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">1000</span>; i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;mian&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：开启线程后不会立即执行，由CPU来调度。</p>\n<h3 id=\"实现Runnable接口\"><a href=\"#实现Runnable接口\" class=\"headerlink\" title=\"实现Runnable接口\"></a>实现<code>Runnable</code>接口</h3><p>步骤：</p>\n<ol>\n<li>直接使用<code>Runnable</code>接口来实现一个类</li>\n<li>实现<code>run()</code>方法，重新编写程序执行内容</li>\n<li>实例化<code>Thread</code>类，将线程对象传入其中</li>\n</ol>\n<p>测试：</p>\n<p>线程1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runnable_1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Runnable_1&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>线程2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runnable_2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Runnable_2&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主线程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> other.Runnable_1;</span><br><span class=\"line\"><span class=\"keyword\">import</span> other.Runnable_2;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Runnable_1 runnable_1 = <span class=\"keyword\">new</span> Runnable_1();</span><br><span class=\"line\">        Runnable_2 runnable_2 = <span class=\"keyword\">new</span> Runnable_2();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(runnable_1);</span><br><span class=\"line\">        Thread thread2 = <span class=\"keyword\">new</span> Thread(runnable_2);</span><br><span class=\"line\"></span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">1000</span>; i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;mian&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>简写的话可以直接这样写:<code>new Thread(runnable_1).start()</code>。</li>\n<li>本质上，<code>Thread</code>类其实也是实现的<code>Runnable</code>接口。</li>\n<li>更推荐使用<code>Runnable</code>接口，更灵活，方便一个对象被多个线程使用。</li>\n</ul>\n<h2 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h2><p>其实<code>Thread</code>具体的实现原理就是使用的代理，使用接口可以巧妙实现<strong>代理</strong>的操作。</p>\n<p>使用结婚来举个例子：</p>\n<ol>\n<li><p>定义一个接口，表示要代理的操作（结婚）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Marry</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">happyMarry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>“代理对象”和“真实对象”同时实现这个接口：</p>\n<ul>\n<li><p>真实对象实现接口（人）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Marry</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">happyMarry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚了！！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>代理对象实现接口（婚庆公司）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeddingCompany</span> <span class=\"keyword\">implements</span> <span class=\"title\">Marry</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> target;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeddingCompany</span><span class=\"params\">(Marry target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">happyMarry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target.happyMarry();</span><br><span class=\"line\">        after();</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚前做的事&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚后做的事&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做的好处是：</p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>代理对象</strong>可以做很多<strong>真实对象</strong>做不了的事</li>\n<li><strong>真实对象</strong>只需要做自己的事就可以</li>\n</ul>\n<p>回头看看<code>Thread</code>这个类，其实就是代理对象，<code>Thread</code>在之前已经实现了<code>Runnable</code>接口，我们使用的时候也实现了<code>Runnable</code>接口，所以在进行多线程的时候，就已经帮我们进行了代理。</p>\n<h2 id=\"Lamda表达式\"><a href=\"#Lamda表达式\" class=\"headerlink\" title=\"Lamda表达式\"></a>Lamda表达式</h2><p>可以主要简化一些程序的逻辑。</p>\n<p>语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(形参)-&gt;&#123;</span><br><span class=\"line\">    执行内容</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h3><p>任何接口，只有<strong>一个抽象方法</strong>，就说明是一个函数接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种情况之下可以使用Lamda表达式来去替代这个接口。</p>\n<p>举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现一个接口，这个接口只有一个方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Temp</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 直接使用接口去实例化这个对象</span></span><br><span class=\"line\">        Temp temp = (<span class=\"keyword\">int</span> a)-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">            System.out.println(a);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 可以像普通的对象一样去调用这个方法</span></span><br><span class=\"line\">        temp.fun(<span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>只有<strong>一行代码</strong>时，可以简化掉花括号</li>\n<li>可以去掉参数类型，但必须统一，<strong>都去掉或都不去掉</strong></li>\n</ul>\n<p>那么关于<code>Runnable</code>接口，就可以直接写成下面的样子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 线程内容</span></span><br><span class=\"line\">&#125;).start()</span><br></pre></td></tr></table></figure>\n<h2 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h2><p>一共五种状态，如图所示：</p>\n<p><img src=\"/2021/07/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/1631189204.png\" alt=\"1631189204\"></p>\n<p>关于线程状态有如下方法：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>setPriority(int newPrivority)</code></td>\n<td>更改优先级</td>\n</tr>\n<tr>\n<td><code>static void sleep(long millis)</code></td>\n<td>指定的毫秒数内进行休眠</td>\n</tr>\n<tr>\n<td><code>void join()</code></td>\n<td>等待线程终止</td>\n</tr>\n<tr>\n<td><code>static void yield()</code></td>\n<td>暂停当前正在执行的线程</td>\n</tr>\n<tr>\n<td><del><code>void interrupt()</code></del></td>\n<td>中断线程（不要使用）</td>\n</tr>\n<tr>\n<td><code>boolean isAlive()</code></td>\n<td>线程是否处于活动状态</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"停止线程\"><a href=\"#停止线程\" class=\"headerlink\" title=\"停止线程\"></a>停止线程</h3><p>注意：停止一个线程最好使用一个标志位来检查：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(flag)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            线程内容</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程休眠\"><a href=\"#线程休眠\" class=\"headerlink\" title=\"线程休眠\"></a>线程休眠</h3><ul>\n<li>可以模拟网络延时、倒计时</li>\n<li>每个对象都有一个锁，sleep不会释放锁</li>\n<li>sleep存在异常，需要向外抛出异常</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sleep</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;延时开始&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;延时结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>由于存在异常，要么抛出异常，要么捕获异常。</p>\n<h3 id=\"线程礼让\"><a href=\"#线程礼让\" class=\"headerlink\" title=\"线程礼让\"></a>线程礼让</h3><p>能够让正在运行的线程暂停，但不阻塞，将线程从<strong>运行状态</strong>转换成<strong>就绪状态</strong>。</p>\n<p><strong>注意</strong>：让CPU重新调度，礼让不一定能够成功。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyYield</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程开始&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 礼让</span></span><br><span class=\"line\">        Thread.yield();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程结束&quot;</span>);</span><br><span class=\"line\">           </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程强制执行\"><a href=\"#线程强制执行\" class=\"headerlink\" title=\"线程强制执行\"></a>线程强制执行</h3><p>可以理解为<strong>插队</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestJoin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;其他线程&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        TestJoin testJoin = <span class=\"keyword\">new</span> TestJoin();</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(testJoin);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;主线程&quot;</span>+i);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 在200次的时候进行强制插队</span></span><br><span class=\"line\">                thread.join();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;主线程强制插队&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>少使用，防止阻塞。</p>\n<h3 id=\"线程状态观测\"><a href=\"#线程状态观测\" class=\"headerlink\" title=\"线程状态观测\"></a>线程状态观测</h3><p>可以使用<code>.getState()</code>方法来观测状态。</p>\n<p>线程的状态在一个枚举里，其中就有：</p>\n<ul>\n<li><code>Thread.State.NEW</code>线程创建</li>\n<li><code>Thread.State.RENNABLE</code>线程运行</li>\n<li><code>Thread.State.TIMED_WAITING</code>线程等待（阻塞）</li>\n<li><code>Thread.State.TERMINATED</code>线程死亡</li>\n</ul>\n<p><strong>注意</strong>：线程死亡后不能重新启动，也就是不能<code>.start()</code></p>\n<h3 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h3><p>优先级使用数字，范围为：<code>1~10</code>，优先级越高就先执行且分配更高的资源。默认是5优先级</p>\n<p>也可以直接使用静态变量去描述：</p>\n<ul>\n<li><code>Thread.MIN_PRIORITY = 1</code>最小优先级</li>\n<li><code>Thread.MAX_PRIORITY = 10</code>最大优先级</li>\n<li><code>Thread.NORM_PRIORITY = 5</code>默认优先级</li>\n</ul>\n<p>可以使用以下方法去处理优先级：</p>\n<ul>\n<li><code>.getPriority()</code>获取优先级</li>\n<li><code>.setPriority(int xxx)</code>设置优先级</li>\n</ul>\n<h3 id=\"守护线程\"><a href=\"#守护线程\" class=\"headerlink\" title=\"守护线程\"></a>守护线程</h3><p>线程分为用户线程和守护线程。</p>\n<ul>\n<li>虚拟机必须保证用户线程执行完毕</li>\n<li>虚拟机不用等待守护线程执行完毕</li>\n<li>举例：垃圾回收、监控内存、后台记录操作日志</li>\n</ul>\n<p>设置成守护线程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.setDaemon(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>默认是正常线程，所以是<code>false</code></p>\n<h2 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h2><p>一般会遇到同一个资源多个线程使用。</p>\n<p>实现条件：队列 + 锁</p>\n<p>在每个线程想使用资源的时候先获得对象的排他锁，独占资源，再执行自己的线程使用资源，其他的线程处于等待状态。</p>\n<p>但会出现一些问题：其他线程会等待，效率变低</p>\n<p>可以使用private关键字保证数据对象只能被方法访问，针对这种方法使用一种机制，使用<code>synchronized</code>关键字。</p>\n<h3 id=\"同步方法\"><a href=\"#同步方法\" class=\"headerlink\" title=\"同步方法\"></a>同步方法</h3><p>当使用<code>synchronized</code>来描述方法的时候就是<strong>同步方法</strong>，每个对象控制一个锁，<code>synchronized</code>方法需要获得这个锁才能执行，否则线程就会堵塞。</p>\n<p>一旦获得这个锁就会执行方法，且独占该锁，直到方法返回才释放该锁，让其他线程可以获得。</p>\n<p>只需要在修改内存的地方使用<code>synchronized</code>方法，因为并不高效。</p>\n<p>案例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建行为</span></span><br><span class=\"line\">        CardShop card = <span class=\"keyword\">new</span> CardShop();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建进程</span></span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(card,<span class=\"string\">&quot;路人A&quot;</span>);</span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(card,<span class=\"string\">&quot;路人B&quot;</span>);</span><br><span class=\"line\">        Thread t3 = <span class=\"keyword\">new</span> Thread(card,<span class=\"string\">&quot;路人C&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动进程</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardShop</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> card_number = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 synchronized 来修饰一个方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">buy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.card_number &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 有票就自减一张</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.card_number--;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 显示买票者的信息</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;[&quot;</span>+Thread.currentThread().getName()+  <span class=\"string\">&quot;] 买了一张，还剩&quot;</span> + <span class=\"keyword\">this</span>.card_number);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">this</span>.flag)</span><br><span class=\"line\">            buy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"同步块\"><a href=\"#同步块\" class=\"headerlink\" title=\"同步块\"></a>同步块</h3><p><code>synchronized</code>来修饰方法的时候，只是锁中了这个方法的对象，并没有锁中这个方法中调用的对象，需要这样去写可以锁中一个对象，这样是<strong>同步块</strong>。</p>\n<p>案例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    Account account;</span><br><span class=\"line\">    Test(Account account)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.account = account;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 锁中一个对象</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>.account)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 其他代码，可以安全访问这个对象</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>可能会出实现两个线程锁住了两个资源，因此不能互相干涉，这时候会出现互相等对方，这样就造成了直接的阻塞，因此这样发生了死锁的问题。</p>\n<p>案例：</p>\n<p>象征着资源的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Temp1</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个资源</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Temp2</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//第二个资源</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseTemp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 用 static 保证只有一份</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Temp1 temp1 = <span class=\"keyword\">new</span> Temp1();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Temp2 temp2 = <span class=\"keyword\">new</span> Temp2();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> choice;\t\t<span class=\"comment\">// 选择</span></span><br><span class=\"line\">    String user;\t<span class=\"comment\">// 使用者</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    UseTemp(<span class=\"keyword\">int</span> choice, String user)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.choice = choice;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.user = user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">using</span><span class=\"params\">()</span> throw InterruptedException</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 想要持有对方的资源</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(choice == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(temp1)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">this</span>.user+ <span class=\"string\">&quot;获得了 temp1&quot;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获得自己的锁</span></span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span>(temp2)&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"keyword\">this</span>.user + <span class=\"string\">&quot;获得了 temp2&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span>(temp2)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">this</span>.user+ <span class=\"string\">&quot;获得了 temp2&quot;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获得自己的锁</span></span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span>(temp1)&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"keyword\">this</span>.user + <span class=\"string\">&quot;获得了 temp1&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>死锁的<strong>必然条件</strong>：</p>\n<ul>\n<li>互斥条件：一个资源每次被一个进程使用。</li>\n<li>请求与保持条件：自己拥有资源的时候，想要获得其他资源。</li>\n<li>不剥夺条件：进程已经获得的资源，在没有使用完之前，不得强行剥夺。</li>\n<li>循环等待条件：若干进程之间形成头尾相连等待资源的关系。</li>\n</ul>\n<p>解决的方法就是，<strong>同步块</strong></p>\n<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><p>JDK5.0开始，提供了更强大的线程同步机制——通过显示定义同步锁对象来实现同步。</p>\n<ul>\n<li>使用<code>juc</code>包中的Lock接口：<code>java.util.concurrent.locks.Lock;</code></li>\n<li><code>ReentrantLock</code>实现了 Lock（可重入锁），拥有与<code>synchronized</code>相同的并发性。</li>\n</ul>\n<p>使用方法：</p>\n<ol>\n<li><p>实例化一个Lock</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br></pre></td></tr></table></figure></li>\n<li><p>加锁的地方</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加锁</span></span><br><span class=\"line\">lock.lock();</span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//锁中的内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 解锁</span></span><br><span class=\"line\">    lock.unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n</li>\n</ol>\n<ul>\n<li>Lock是显示锁，需要手动<strong>开关</strong>（一定要关上）；<code>synchronized</code>是隐式锁，出了作用域就直接释放。</li>\n<li>Lock只有<strong>代码块锁</strong>，<code>synchronized</code>还有<strong>方法锁</strong>。</li>\n<li>Lock性能更好，JVM会花费更少的时间来调度。</li>\n</ul>\n<h2 id=\"线程协作\"><a href=\"#线程协作\" class=\"headerlink\" title=\"线程协作\"></a>线程协作</h2><h3 id=\"生产者消费者模式\"><a href=\"#生产者消费者模式\" class=\"headerlink\" title=\"生产者消费者模式\"></a>生产者消费者模式</h3><p>指区分开<strong>生产者</strong>和<strong>消费者</strong>，在多线程中需要线程独自去扮演这些角色。</p>\n<p>应用场景：</p>\n<ul>\n<li>生产者生产出来的产品放入仓库中，消费者从仓库中取出来。</li>\n<li>针对生产者：仓库中有产品，生产者直接放入；仓库中没有产品，生产者需要考虑是否继续生产。</li>\n<li>针对消费者：仓库中有产品，消费者直接拿出使用；仓库中没有产品，消费者需要等待生产者生产并放入仓库。</li>\n</ul>\n<p>只有<code>synchronized</code>是不够用的，只能实现<strong>同步</strong>，不能实现<strong>通信</strong>。</p>\n<p>java的Object对象中有以下几个方法：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>wait()</code></td>\n<td>线程会一直等待，直到其他线程通知，与sleep不同，会释放锁</td>\n</tr>\n<tr>\n<td><code>wait(long timeout)</code></td>\n<td>指定等待的毫秒数</td>\n</tr>\n<tr>\n<td><code>notify()</code></td>\n<td>唤醒一个处于等待状态的线程</td>\n</tr>\n<tr>\n<td><code>notifyAll()</code></td>\n<td>唤醒所有等待的线程，优先级越高提前唤醒</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"管程法\"><a href=\"#管程法\" class=\"headerlink\" title=\"管程法\"></a>管程法</h4><p>使用另一块缓冲区去管理资源，消费者和生产者能够访问这片区域。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 缓冲区</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span></span>&#123;</span><br><span class=\"line\">    Temp[] temp = <span class=\"keyword\">new</span> Temp[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 生产者放入产品</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(Temp tem)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 满了就等待消费者消费，生产者停止生产</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count == temp.length)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;停止生产，等待消费&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.temp[count] = tem;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Temp <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 空了就等待生产者生产</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count == temp.length)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;停止消费，等待生产&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">        Temp tem = temp[count];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"标志位法\"><a href=\"#标志位法\" class=\"headerlink\" title=\"标志位法\"></a>标志位法</h4><p>不需要定义缓冲区，只需要定义一个标志位，用来判断是否有物品。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activate</span></span>&#123;</span><br><span class=\"line\">    Temp tem;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(Temp tem)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        代码</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 生产</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tem = tem;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag = ! <span class=\"keyword\">this</span>.flag</span><br><span class=\"line\">        <span class=\"comment\">// 通知其他接收者</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","more":"<h2 id=\"一些基本概念\"><a href=\"#一些基本概念\" class=\"headerlink\" title=\"一些基本概念\"></a>一些基本概念</h2><p>为了防止单个程序发生阻塞的现象，所以必须使用多线程或进程来解决此类问题。</p>\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><p>在操作系统中运行的的程序会占用一个进程，进程主要在执行一个程序的过程中，系统会分配给的一些资源给此进程进行执行一些程序，主要针对于硬件产生的一种并发。</p>\n<p>是系统资源分配的基本单位。</p>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><p>一个进程中会分配多个线程，用来是提高某个程序高并发运行。</p>\n<p>是CPU调度和执行的基本单位，真正多线程是多个CPU（多核）共同执行。</p>\n<h2 id=\"创建线程\"><a href=\"#创建线程\" class=\"headerlink\" title=\"创建线程\"></a>创建线程</h2><p>三种方式：</p>\n<ul>\n<li>继承<code>Thread</code>类（重点）</li>\n<li>使用<code>Runnable</code>接口（重点）</li>\n<li>使用<code>Callable</code>接口（了解）</li>\n</ul>\n<h3 id=\"继承Thread类\"><a href=\"#继承Thread类\" class=\"headerlink\" title=\"继承Thread类\"></a>继承<code>Thread</code>类</h3><p>步骤：</p>\n<ol>\n<li>继承<code>Thread</code>类，重写<code>run</code>方法</li>\n<li>实例化对象，使用<code>start()</code>方法启动</li>\n</ol>\n<p>测试：</p>\n<p>线程1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thread_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread_1&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>线程2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thread_2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread_2&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主线程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> other.Thread_1;</span><br><span class=\"line\"><span class=\"keyword\">import</span> other.Thread_2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread_1 thread1 = <span class=\"keyword\">new</span> Thread_1();</span><br><span class=\"line\">        Thread_2 thread2 = <span class=\"keyword\">new</span> Thread_2();</span><br><span class=\"line\"></span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">1000</span>; i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;mian&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：开启线程后不会立即执行，由CPU来调度。</p>\n<h3 id=\"实现Runnable接口\"><a href=\"#实现Runnable接口\" class=\"headerlink\" title=\"实现Runnable接口\"></a>实现<code>Runnable</code>接口</h3><p>步骤：</p>\n<ol>\n<li>直接使用<code>Runnable</code>接口来实现一个类</li>\n<li>实现<code>run()</code>方法，重新编写程序执行内容</li>\n<li>实例化<code>Thread</code>类，将线程对象传入其中</li>\n</ol>\n<p>测试：</p>\n<p>线程1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runnable_1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Runnable_1&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>线程2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runnable_2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Runnable_2&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主线程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> other.Runnable_1;</span><br><span class=\"line\"><span class=\"keyword\">import</span> other.Runnable_2;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Runnable_1 runnable_1 = <span class=\"keyword\">new</span> Runnable_1();</span><br><span class=\"line\">        Runnable_2 runnable_2 = <span class=\"keyword\">new</span> Runnable_2();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(runnable_1);</span><br><span class=\"line\">        Thread thread2 = <span class=\"keyword\">new</span> Thread(runnable_2);</span><br><span class=\"line\"></span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">1000</span>; i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;mian&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>简写的话可以直接这样写:<code>new Thread(runnable_1).start()</code>。</li>\n<li>本质上，<code>Thread</code>类其实也是实现的<code>Runnable</code>接口。</li>\n<li>更推荐使用<code>Runnable</code>接口，更灵活，方便一个对象被多个线程使用。</li>\n</ul>\n<h2 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h2><p>其实<code>Thread</code>具体的实现原理就是使用的代理，使用接口可以巧妙实现<strong>代理</strong>的操作。</p>\n<p>使用结婚来举个例子：</p>\n<ol>\n<li><p>定义一个接口，表示要代理的操作（结婚）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Marry</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">happyMarry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>“代理对象”和“真实对象”同时实现这个接口：</p>\n<ul>\n<li><p>真实对象实现接口（人）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Marry</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">happyMarry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚了！！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>代理对象实现接口（婚庆公司）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeddingCompany</span> <span class=\"keyword\">implements</span> <span class=\"title\">Marry</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> target;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeddingCompany</span><span class=\"params\">(Marry target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">happyMarry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target.happyMarry();</span><br><span class=\"line\">        after();</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚前做的事&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚后做的事&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做的好处是：</p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>代理对象</strong>可以做很多<strong>真实对象</strong>做不了的事</li>\n<li><strong>真实对象</strong>只需要做自己的事就可以</li>\n</ul>\n<p>回头看看<code>Thread</code>这个类，其实就是代理对象，<code>Thread</code>在之前已经实现了<code>Runnable</code>接口，我们使用的时候也实现了<code>Runnable</code>接口，所以在进行多线程的时候，就已经帮我们进行了代理。</p>\n<h2 id=\"Lamda表达式\"><a href=\"#Lamda表达式\" class=\"headerlink\" title=\"Lamda表达式\"></a>Lamda表达式</h2><p>可以主要简化一些程序的逻辑。</p>\n<p>语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(形参)-&gt;&#123;</span><br><span class=\"line\">    执行内容</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h3><p>任何接口，只有<strong>一个抽象方法</strong>，就说明是一个函数接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种情况之下可以使用Lamda表达式来去替代这个接口。</p>\n<p>举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现一个接口，这个接口只有一个方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Temp</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 直接使用接口去实例化这个对象</span></span><br><span class=\"line\">        Temp temp = (<span class=\"keyword\">int</span> a)-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">            System.out.println(a);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 可以像普通的对象一样去调用这个方法</span></span><br><span class=\"line\">        temp.fun(<span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>只有<strong>一行代码</strong>时，可以简化掉花括号</li>\n<li>可以去掉参数类型，但必须统一，<strong>都去掉或都不去掉</strong></li>\n</ul>\n<p>那么关于<code>Runnable</code>接口，就可以直接写成下面的样子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 线程内容</span></span><br><span class=\"line\">&#125;).start()</span><br></pre></td></tr></table></figure>\n<h2 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h2><p>一共五种状态，如图所示：</p>\n<p><img src=\"/2021/07/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/1631189204.png\" alt=\"1631189204\"></p>\n<p>关于线程状态有如下方法：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>setPriority(int newPrivority)</code></td>\n<td>更改优先级</td>\n</tr>\n<tr>\n<td><code>static void sleep(long millis)</code></td>\n<td>指定的毫秒数内进行休眠</td>\n</tr>\n<tr>\n<td><code>void join()</code></td>\n<td>等待线程终止</td>\n</tr>\n<tr>\n<td><code>static void yield()</code></td>\n<td>暂停当前正在执行的线程</td>\n</tr>\n<tr>\n<td><del><code>void interrupt()</code></del></td>\n<td>中断线程（不要使用）</td>\n</tr>\n<tr>\n<td><code>boolean isAlive()</code></td>\n<td>线程是否处于活动状态</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"停止线程\"><a href=\"#停止线程\" class=\"headerlink\" title=\"停止线程\"></a>停止线程</h3><p>注意：停止一个线程最好使用一个标志位来检查：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(flag)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            线程内容</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程休眠\"><a href=\"#线程休眠\" class=\"headerlink\" title=\"线程休眠\"></a>线程休眠</h3><ul>\n<li>可以模拟网络延时、倒计时</li>\n<li>每个对象都有一个锁，sleep不会释放锁</li>\n<li>sleep存在异常，需要向外抛出异常</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sleep</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;延时开始&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;延时结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>由于存在异常，要么抛出异常，要么捕获异常。</p>\n<h3 id=\"线程礼让\"><a href=\"#线程礼让\" class=\"headerlink\" title=\"线程礼让\"></a>线程礼让</h3><p>能够让正在运行的线程暂停，但不阻塞，将线程从<strong>运行状态</strong>转换成<strong>就绪状态</strong>。</p>\n<p><strong>注意</strong>：让CPU重新调度，礼让不一定能够成功。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyYield</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程开始&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 礼让</span></span><br><span class=\"line\">        Thread.yield();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程结束&quot;</span>);</span><br><span class=\"line\">           </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程强制执行\"><a href=\"#线程强制执行\" class=\"headerlink\" title=\"线程强制执行\"></a>线程强制执行</h3><p>可以理解为<strong>插队</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestJoin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;其他线程&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        TestJoin testJoin = <span class=\"keyword\">new</span> TestJoin();</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(testJoin);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;主线程&quot;</span>+i);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 在200次的时候进行强制插队</span></span><br><span class=\"line\">                thread.join();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;主线程强制插队&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>少使用，防止阻塞。</p>\n<h3 id=\"线程状态观测\"><a href=\"#线程状态观测\" class=\"headerlink\" title=\"线程状态观测\"></a>线程状态观测</h3><p>可以使用<code>.getState()</code>方法来观测状态。</p>\n<p>线程的状态在一个枚举里，其中就有：</p>\n<ul>\n<li><code>Thread.State.NEW</code>线程创建</li>\n<li><code>Thread.State.RENNABLE</code>线程运行</li>\n<li><code>Thread.State.TIMED_WAITING</code>线程等待（阻塞）</li>\n<li><code>Thread.State.TERMINATED</code>线程死亡</li>\n</ul>\n<p><strong>注意</strong>：线程死亡后不能重新启动，也就是不能<code>.start()</code></p>\n<h3 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h3><p>优先级使用数字，范围为：<code>1~10</code>，优先级越高就先执行且分配更高的资源。默认是5优先级</p>\n<p>也可以直接使用静态变量去描述：</p>\n<ul>\n<li><code>Thread.MIN_PRIORITY = 1</code>最小优先级</li>\n<li><code>Thread.MAX_PRIORITY = 10</code>最大优先级</li>\n<li><code>Thread.NORM_PRIORITY = 5</code>默认优先级</li>\n</ul>\n<p>可以使用以下方法去处理优先级：</p>\n<ul>\n<li><code>.getPriority()</code>获取优先级</li>\n<li><code>.setPriority(int xxx)</code>设置优先级</li>\n</ul>\n<h3 id=\"守护线程\"><a href=\"#守护线程\" class=\"headerlink\" title=\"守护线程\"></a>守护线程</h3><p>线程分为用户线程和守护线程。</p>\n<ul>\n<li>虚拟机必须保证用户线程执行完毕</li>\n<li>虚拟机不用等待守护线程执行完毕</li>\n<li>举例：垃圾回收、监控内存、后台记录操作日志</li>\n</ul>\n<p>设置成守护线程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.setDaemon(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>默认是正常线程，所以是<code>false</code></p>\n<h2 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h2><p>一般会遇到同一个资源多个线程使用。</p>\n<p>实现条件：队列 + 锁</p>\n<p>在每个线程想使用资源的时候先获得对象的排他锁，独占资源，再执行自己的线程使用资源，其他的线程处于等待状态。</p>\n<p>但会出现一些问题：其他线程会等待，效率变低</p>\n<p>可以使用private关键字保证数据对象只能被方法访问，针对这种方法使用一种机制，使用<code>synchronized</code>关键字。</p>\n<h3 id=\"同步方法\"><a href=\"#同步方法\" class=\"headerlink\" title=\"同步方法\"></a>同步方法</h3><p>当使用<code>synchronized</code>来描述方法的时候就是<strong>同步方法</strong>，每个对象控制一个锁，<code>synchronized</code>方法需要获得这个锁才能执行，否则线程就会堵塞。</p>\n<p>一旦获得这个锁就会执行方法，且独占该锁，直到方法返回才释放该锁，让其他线程可以获得。</p>\n<p>只需要在修改内存的地方使用<code>synchronized</code>方法，因为并不高效。</p>\n<p>案例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建行为</span></span><br><span class=\"line\">        CardShop card = <span class=\"keyword\">new</span> CardShop();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建进程</span></span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(card,<span class=\"string\">&quot;路人A&quot;</span>);</span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(card,<span class=\"string\">&quot;路人B&quot;</span>);</span><br><span class=\"line\">        Thread t3 = <span class=\"keyword\">new</span> Thread(card,<span class=\"string\">&quot;路人C&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动进程</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardShop</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> card_number = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 synchronized 来修饰一个方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">buy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.card_number &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 有票就自减一张</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.card_number--;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 显示买票者的信息</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;[&quot;</span>+Thread.currentThread().getName()+  <span class=\"string\">&quot;] 买了一张，还剩&quot;</span> + <span class=\"keyword\">this</span>.card_number);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">this</span>.flag)</span><br><span class=\"line\">            buy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"同步块\"><a href=\"#同步块\" class=\"headerlink\" title=\"同步块\"></a>同步块</h3><p><code>synchronized</code>来修饰方法的时候，只是锁中了这个方法的对象，并没有锁中这个方法中调用的对象，需要这样去写可以锁中一个对象，这样是<strong>同步块</strong>。</p>\n<p>案例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    Account account;</span><br><span class=\"line\">    Test(Account account)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.account = account;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 锁中一个对象</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>.account)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 其他代码，可以安全访问这个对象</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>可能会出实现两个线程锁住了两个资源，因此不能互相干涉，这时候会出现互相等对方，这样就造成了直接的阻塞，因此这样发生了死锁的问题。</p>\n<p>案例：</p>\n<p>象征着资源的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Temp1</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个资源</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Temp2</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//第二个资源</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseTemp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 用 static 保证只有一份</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Temp1 temp1 = <span class=\"keyword\">new</span> Temp1();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Temp2 temp2 = <span class=\"keyword\">new</span> Temp2();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> choice;\t\t<span class=\"comment\">// 选择</span></span><br><span class=\"line\">    String user;\t<span class=\"comment\">// 使用者</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    UseTemp(<span class=\"keyword\">int</span> choice, String user)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.choice = choice;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.user = user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">using</span><span class=\"params\">()</span> throw InterruptedException</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 想要持有对方的资源</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(choice == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(temp1)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">this</span>.user+ <span class=\"string\">&quot;获得了 temp1&quot;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获得自己的锁</span></span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span>(temp2)&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"keyword\">this</span>.user + <span class=\"string\">&quot;获得了 temp2&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span>(temp2)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">this</span>.user+ <span class=\"string\">&quot;获得了 temp2&quot;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获得自己的锁</span></span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span>(temp1)&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"keyword\">this</span>.user + <span class=\"string\">&quot;获得了 temp1&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>死锁的<strong>必然条件</strong>：</p>\n<ul>\n<li>互斥条件：一个资源每次被一个进程使用。</li>\n<li>请求与保持条件：自己拥有资源的时候，想要获得其他资源。</li>\n<li>不剥夺条件：进程已经获得的资源，在没有使用完之前，不得强行剥夺。</li>\n<li>循环等待条件：若干进程之间形成头尾相连等待资源的关系。</li>\n</ul>\n<p>解决的方法就是，<strong>同步块</strong></p>\n<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><p>JDK5.0开始，提供了更强大的线程同步机制——通过显示定义同步锁对象来实现同步。</p>\n<ul>\n<li>使用<code>juc</code>包中的Lock接口：<code>java.util.concurrent.locks.Lock;</code></li>\n<li><code>ReentrantLock</code>实现了 Lock（可重入锁），拥有与<code>synchronized</code>相同的并发性。</li>\n</ul>\n<p>使用方法：</p>\n<ol>\n<li><p>实例化一个Lock</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br></pre></td></tr></table></figure></li>\n<li><p>加锁的地方</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加锁</span></span><br><span class=\"line\">lock.lock();</span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//锁中的内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 解锁</span></span><br><span class=\"line\">    lock.unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n</li>\n</ol>\n<ul>\n<li>Lock是显示锁，需要手动<strong>开关</strong>（一定要关上）；<code>synchronized</code>是隐式锁，出了作用域就直接释放。</li>\n<li>Lock只有<strong>代码块锁</strong>，<code>synchronized</code>还有<strong>方法锁</strong>。</li>\n<li>Lock性能更好，JVM会花费更少的时间来调度。</li>\n</ul>\n<h2 id=\"线程协作\"><a href=\"#线程协作\" class=\"headerlink\" title=\"线程协作\"></a>线程协作</h2><h3 id=\"生产者消费者模式\"><a href=\"#生产者消费者模式\" class=\"headerlink\" title=\"生产者消费者模式\"></a>生产者消费者模式</h3><p>指区分开<strong>生产者</strong>和<strong>消费者</strong>，在多线程中需要线程独自去扮演这些角色。</p>\n<p>应用场景：</p>\n<ul>\n<li>生产者生产出来的产品放入仓库中，消费者从仓库中取出来。</li>\n<li>针对生产者：仓库中有产品，生产者直接放入；仓库中没有产品，生产者需要考虑是否继续生产。</li>\n<li>针对消费者：仓库中有产品，消费者直接拿出使用；仓库中没有产品，消费者需要等待生产者生产并放入仓库。</li>\n</ul>\n<p>只有<code>synchronized</code>是不够用的，只能实现<strong>同步</strong>，不能实现<strong>通信</strong>。</p>\n<p>java的Object对象中有以下几个方法：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>wait()</code></td>\n<td>线程会一直等待，直到其他线程通知，与sleep不同，会释放锁</td>\n</tr>\n<tr>\n<td><code>wait(long timeout)</code></td>\n<td>指定等待的毫秒数</td>\n</tr>\n<tr>\n<td><code>notify()</code></td>\n<td>唤醒一个处于等待状态的线程</td>\n</tr>\n<tr>\n<td><code>notifyAll()</code></td>\n<td>唤醒所有等待的线程，优先级越高提前唤醒</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"管程法\"><a href=\"#管程法\" class=\"headerlink\" title=\"管程法\"></a>管程法</h4><p>使用另一块缓冲区去管理资源，消费者和生产者能够访问这片区域。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 缓冲区</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span></span>&#123;</span><br><span class=\"line\">    Temp[] temp = <span class=\"keyword\">new</span> Temp[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 生产者放入产品</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(Temp tem)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 满了就等待消费者消费，生产者停止生产</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count == temp.length)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;停止生产，等待消费&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.temp[count] = tem;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Temp <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 空了就等待生产者生产</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count == temp.length)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;停止消费，等待生产&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">        Temp tem = temp[count];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"标志位法\"><a href=\"#标志位法\" class=\"headerlink\" title=\"标志位法\"></a>标志位法</h4><p>不需要定义缓冲区，只需要定义一个标志位，用来判断是否有物品。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activate</span></span>&#123;</span><br><span class=\"line\">    Temp tem;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(Temp tem)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        代码</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 生产</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tem = tem;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag = ! <span class=\"keyword\">this</span>.flag</span><br><span class=\"line\">        <span class=\"comment\">// 通知其他接收者</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Matrix的笔记本","path":"api/categories/Matrix的笔记本.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"}]}