{"title":"我的java学习笔记","slug":"我的java学习笔记","date":"2021-03-04T13:25:51.000Z","updated":"2021-10-14T06:59:31.421Z","comments":true,"path":"api/articles/我的java学习笔记.json","excerpt":null,"covers":null,"content":"<p>这是我当初学习java时的一些笔记，这几天翻出来看了一下，感觉可以作为一些参考，由于当时我有C/C++的基础，所以学习的速度非常快，有些地方直接和C/C++进行了对比，所以在观看的时候最好有一些编程基础。</p>\n<blockquote>\n<p><em>语言只是算法的载体，会得再多，也仅仅是获得了一个又一个躯壳，真正称得上灵魂的是算法，一个没有灵魂的躯壳，只能算一个行尸走肉。</em></p>\n</blockquote>\n<h2 id=\"开始前的一些准备\"><a href=\"#开始前的一些准备\" class=\"headerlink\" title=\"开始前的一些准备\"></a>开始前的一些准备</h2><h3 id=\"Java的三大版本\"><a href=\"#Java的三大版本\" class=\"headerlink\" title=\"Java的三大版本\"></a>Java的三大版本</h3><ul>\n<li>JavaSE：标准版（桌面应用程序，控制台开发）</li>\n<li><del>JavaME：嵌入式开发（手机app）</del></li>\n<li>JavaEE：企业开发</li>\n</ul>\n<h3 id=\"JDK、JRE、JVM\"><a href=\"#JDK、JRE、JVM\" class=\"headerlink\" title=\"JDK、JRE、JVM\"></a>JDK、JRE、JVM</h3><ul>\n<li>JDK：Java开发者工具（用来开发Java程序）</li>\n<li>JRE：Java运行环境（可以运行Java的程序）</li>\n<li>JVM：Java虚拟机（核心部分）</li>\n</ul>\n<h3 id=\"虚拟机机制\"><a href=\"#虚拟机机制\" class=\"headerlink\" title=\"虚拟机机制\"></a>虚拟机机制</h3><p><code>.java</code>文件编译成<code>.class</code>文件，在虚拟机（JVM）上运行，实现“一次编译处处运行”。</p>\n<h3 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h3><p>C/C++是程序员手动回收内存，高效准确，但容易失误。</p>\n<p>java自动垃圾回收，可以自动检测内存，虽然规避了失误，但不会非常高效。</p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>官网下载JDK，尽量使用稳定版本，推荐使用压缩包进行解压，之后再进行环境变量配置，在版本上可以更好的更换。</p>\n<p>配置环境变量包括：<code>JDK\\bin</code>和<code>JDK\\jre\\bin</code>。</p>\n<p>检测方法，输入<code>java -version</code>会出现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java version &quot;1.8.0_101&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_101-b13)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第一个程序\"><a href=\"#第一个程序\" class=\"headerlink\" title=\"第一个程序\"></a>第一个程序</h3><ol>\n<li><p>建立<code>Test.java</code>文件，用来写代码。</p>\n</li>\n<li><p>写下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打印后不会换行</span></span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 打印后自动换行</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，类的名字和文件名字要一致。</p>\n</li>\n<li><p>打开命令窗口，cd到目标文件的路径，输入以下指令进行编译：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac Test.java</span><br></pre></td></tr></table></figure>\n<p>编译完之后就会出现一个名字相同的<code>.class</code>文件。</p>\n</li>\n<li><p>运行<code>Test.class</code>文件，需要输入以下程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java Test</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2></li>\n</ol>\n<p>这一部分的特点是java的基础部分，大部分非常和C/C++类似，所以有点基础的话简单看看就基本了解。</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li><p>单行注释：同C/C++，<code>//注释内容</code></p>\n</li>\n<li><p>多行注释：同C/C++，<code>/*注释内容*/</code></p>\n<p>文档注释：java特有</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*类名</span></span><br><span class=\"line\"><span class=\"comment\">*描述</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@author</span> 作者名</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@version</span> 版本</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@since</span> jdk版本</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3></li>\n</ul>\n<p>不是强制，但更具有规范性。</p>\n<ul>\n<li>包名：所有字母小写。</li>\n<li>类名、接口名：大驼峰命名。</li>\n<li>变量名、方法名：小驼峰命名。</li>\n<li>常量名：所有字母大写，多单词时用下划线分割。</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p><strong>注：</strong>八种<strong>基本数据类型</strong>之外全是<strong>引用数据类型</strong>。</p>\n<h4 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h4><ul>\n<li>整型<ul>\n<li><code>byte</code>：1字节</li>\n<li><code>short</code>：2字节</li>\n<li><code>int</code>：4字节</li>\n<li><code>long</code>：8字节</li>\n</ul>\n</li>\n<li>浮点型<ul>\n<li><code>float</code>：单精度（7位有效数字），4字节</li>\n<li><code>double</code>：双精度（16位有效数字），8字节</li>\n</ul>\n</li>\n<li>字符型：<code>char</code></li>\n<li>布尔型：<code>boolean</code></li>\n</ul>\n<h4 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h4><ul>\n<li>类</li>\n<li>接口</li>\n<li>数组</li>\n</ul>\n<h4 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a><code>String</code>类型</h4><p>引用类型的一种，当出现两个相同的内容时，会分配相同的内存。</p>\n<p>可以使用“+”来进行拼接，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = <span class=\"string\">&quot;hello &quot;</span> + <span class=\"string\">&quot;world&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>注：只要有一个String类型进行相加时，就会合并成字符串，但前面会进行直接计算。</p>\n<h3 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h3><h4 id=\"基本转换\"><a href=\"#基本转换\" class=\"headerlink\" title=\"基本转换\"></a>基本转换</h4><p>(char、byte、short) —&gt; int —&gt; long —&gt; float —&gt; double</p>\n<h4 id=\"强制转换\"><a href=\"#强制转换\" class=\"headerlink\" title=\"强制转换\"></a>强制转换</h4><p>举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> number = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">byte</span> temp = (<span class=\"keyword\">byte</span>)number;</span><br></pre></td></tr></table></figure>\n<p>虽然强制转换很不错，这种操作会出现溢出现象，而且只针对基本数据类型。</p>\n<p>注：布尔类型不能转换成其他类型。</p>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>数学运算符、赋值运算符、逻辑运算符、比较运算符、位运算符、三元运算符，这些操作和C/C++类似，不再赘述。</p>\n<h3 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h3><p>条件语句、循环语句、特殊语句（break、continue、return），这些操作和C/C++类似，不再赘述。</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><h4 id=\"声明和初始化\"><a href=\"#声明和初始化\" class=\"headerlink\" title=\"声明和初始化\"></a>声明和初始化</h4><p>变量声明完就要初始化，这涉及到一些java运行机制，所以必须这样操作。但在声明数组的时候可以不用初始化，值得注意的是，java数组声明和C/C++有点不同：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个int数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] num;</span><br><span class=\"line\"><span class=\"keyword\">int</span> num[];</span><br></pre></td></tr></table></figure>\n<p>和C/C++不同点主要是可以把中括号直接放前面。</p>\n<p>虽然可以不用初始化，但一般还是直接初始化，这里需要使用new关键字，new作用就是分配空间。</p>\n<p>以下为动态初始化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个int数组，并初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br></pre></td></tr></table></figure>\n<p>动态初始化不会进行赋值，所以初始化完后会是默认值，初始化同时需要说明数据类型和分配大小。</p>\n<p>还有一种静态初始化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个int数组，并初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>这种直接初始化并赋值，不用说明空间申请大小。</p>\n<h4 id=\"内部方法和属性\"><a href=\"#内部方法和属性\" class=\"headerlink\" title=\"内部方法和属性\"></a>内部方法和属性</h4><p>每个数组提供了一个length属性，可以利用这个属性直接查看这个数组的大小：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> len = num.length;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h4><p>其实就是每个数组中的每个元素就是一个数组，这样可以进行不断的数组嵌套。</p>\n<p>书写方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动态初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num1[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 静态初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num2[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[][]&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只定义第一个维度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num3[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>][];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以不相同</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num2[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[][]&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"核心部分\"><a href=\"#核心部分\" class=\"headerlink\" title=\"核心部分\"></a>核心部分</h2><p>java是一个<strong>强</strong>面向对象的语言，比C++和Python还要强调对象的概念，这部分主要去讲面向对象的一些操作。</p>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><h4 id=\"写一个类\"><a href=\"#写一个类\" class=\"headerlink\" title=\"写一个类\"></a>写一个类</h4><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性（成员变量）</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> sex;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 方法（成员函数）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;姓名：&quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>成员变量是可以不用初始化的，因为有默认值。</p>\n<p>新建文件，类和文件名相同。</p>\n<h4 id=\"实例化一个类\"><a href=\"#实例化一个类\" class=\"headerlink\" title=\"实例化一个类\"></a>实例化一个类</h4><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个Persion对象，并实例化</span></span><br><span class=\"line\">Persion persion;</span><br><span class=\"line\">persion = <span class=\"keyword\">new</span> Persion();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//与上面相同</span></span><br><span class=\"line\">Persion persion = <span class=\"keyword\">new</span> Persion();</span><br></pre></td></tr></table></figure>\n<h4 id=\"匿名对象\"><a href=\"#匿名对象\" class=\"headerlink\" title=\"匿名对象\"></a>匿名对象</h4><p>不定义对象句柄，直接实例化，接着使用内部的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Persion().showName();</span><br></pre></td></tr></table></figure>\n<p>特点就是只使用一次就可以，或者将其作为实参直接传递。</p>\n<h3 id=\"类的属性\"><a href=\"#类的属性\" class=\"headerlink\" title=\"类的属性\"></a>类的属性</h3><p>语法格式：修饰符 类型 属性名 = 初值</p>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><ul>\n<li><code>public</code>：公有，外部可以直接访问。</li>\n<li><code>private</code>：私有，只能通过类的内部访问。</li>\n</ul>\n<h4 id=\"成员变量的两种方式\"><a href=\"#成员变量的两种方式\" class=\"headerlink\" title=\"成员变量的两种方式\"></a>成员变量的两种方式</h4><ul>\n<li><p>实例变量：最普通的变量，类实例化之后才能使用</p>\n</li>\n<li><p>类变量：在中间加上<code>static</code>进行修饰，类不用实例化，直接通过<code>类名.属性</code>就可以使用，存在于静态域。</p>\n<p><code>static</code>的方法只能访问<code>static</code>的变量，但普通方法可以访问<code>static</code>变量。</p>\n</li>\n</ul>\n<h3 id=\"类的方法\"><a href=\"#类的方法\" class=\"headerlink\" title=\"类的方法\"></a>类的方法</h3><p>完成某些功能的函数。</p>\n<h4 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h4><p>java的参数传递方式很有意思，准确来讲是<strong>值传递</strong>。</p>\n<p>首先讲一下虚拟机的内存模型：</p>\n<p>虚拟机中有栈（stack）、堆（heap）和方法区（method）：</p>\n<ul>\n<li>栈（stack）：保存了所有的基本数据类型和引用数据类型的地址。</li>\n<li>堆（heap）：所有对象，引用数据类型的地址指向这里。</li>\n<li>方法区（method）：所有class和static变量</li>\n</ul>\n<p>当使用基本数据类型的时候，由于值传递，直接是拷贝了数据放在栈中，函数结束的时候直接销毁。</p>\n<p>当使用引用数据类型的时候，由于值传递，拷贝了这个引用类型的地址，所以放在栈中的是该对象的地址（也就是指针），那么接下来使用的时候该地址指向了原对象，这就很有意思了，直接变成了引用传递。</p>\n<h4 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h4><p>一个类中可以存在多个同名方法，前提是参数的个数不同或者类型不同。</p>\n<h4 id=\"多参数传递\"><a href=\"#多参数传递\" class=\"headerlink\" title=\"多参数传递\"></a>多参数传递</h4><h5 id=\"使用数组传递可变参数\"><a href=\"#使用数组传递可变参数\" class=\"headerlink\" title=\"使用数组传递可变参数\"></a>使用数组传递可变参数</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 函数的内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>&#125;</span><br><span class=\"line\">persion.show(str);</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用java特有方式\"><a href=\"#使用java特有方式\" class=\"headerlink\" title=\"使用java特有方式\"></a>使用java特有方式</h5><p>其实和数组的使用方式相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(String... args)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 函数的内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>&#125;</span><br><span class=\"line\">persion.show(str);</span><br><span class=\"line\"><span class=\"comment\">// 也可以这样用</span></span><br><span class=\"line\">persion.show(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<ul>\n<li>第二种可以不写参数，但使用第一种的时候需要将null（空数组）传递进去。</li>\n<li>必须放在最后，前面部分放其他类型。</li>\n</ul>\n<h3 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h3><p>java没有命名空间的概念，但包的管理解决了命名冲突的问题，同时方便管理了其他的程序。</p>\n<p>本质就是一个文件夹，文件夹中的每一个程序文件里最开始都有一句语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> 顶层包名.子包名;</span><br></pre></td></tr></table></figure>\n<p>这句指明该类所属的包，如果<strong>同一个包下调用文件</strong>可以不用说明。</p>\n<p>比较常用的命名方式：</p>\n<ul>\n<li>小写，这样可以区分类文件</li>\n<li>使用公司倒置命名，例如百度的域名：<code>www.baidu.com</code>，可以命名成<code>com.baidu.www</code></li>\n</ul>\n<p>调用的方式也很简单（上面的例子）：<code>import com.baidu.www.Demo</code></p>\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><h4 id=\"修饰符的区别\"><a href=\"#修饰符的区别\" class=\"headerlink\" title=\"修饰符的区别\"></a>修饰符的区别</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>类内部调用</th>\n<th>同一包内调用</th>\n<th>子类调用</th>\n<th>其他地方</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>private</code></td>\n<td>Yes</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>（缺省）</td>\n<td>Yes</td>\n<td>Yes</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>protect</code></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td></td>\n</tr>\n<tr>\n<td><code>public</code></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h4><p>构造函数与类名相同，没有返回值，当实例化这个对象的时候就会调用这个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Persion</span><span class=\"params\">(<span class=\"keyword\">int</span> age, String name)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Persion persion = <span class=\"keyword\">new</span> Persion(<span class=\"number\">18</span>,<span class=\"string\">&quot;wang&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>如果定义了构造函数，就不会使用默认的构造函数。</p>\n<p>同样道理，构造函数也存在重载，可以提供多种初始化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Persion</span><span class=\"params\">(<span class=\"keyword\">int</span> age, String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构造函数1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Persion</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构造函数2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Persion</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构造函数3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Persion</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构造函数4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Persion persion = <span class=\"keyword\">new</span> Persion(<span class=\"number\">18</span>,<span class=\"string\">&quot;wang&quot;</span>);</span><br><span class=\"line\">Persion persion = <span class=\"keyword\">new</span> Persion(<span class=\"number\">18</span>);</span><br><span class=\"line\">Persion persion = <span class=\"keyword\">new</span> Persion(<span class=\"string\">&quot;wang&quot;</span>);</span><br><span class=\"line\">Persion persion = <span class=\"keyword\">new</span> Persion();</span><br></pre></td></tr></table></figure>\n<h4 id=\"this关键字\"><a href=\"#this关键字\" class=\"headerlink\" title=\"this关键字\"></a>this关键字</h4><p>表示当前对象，可以调用自己成员，主要是区分形参和类的成员变量的重名。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Persion</span><span class=\"params\">(<span class=\"keyword\">int</span> age, String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;姓名：&quot;</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以让<code>this()</code>为自己调用自己的构造函数，但必须有一个不用<code>this()</code>的构造函数。</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">\tString school;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>extends</code>继承了<code>Persion</code>类，拥有<code>Persion</code>类的所有成员。</p>\n<p>注：不要仅为了一个功能去继承。</p>\n<p>java只支持单继承，不允许多继承，允许多层继承。</p>\n<h4 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h4><p>方法重写可以更改从父类继承过来的函数，方便更好的使用。</p>\n<p>要求：</p>\n<ul>\n<li>必须拥有相同的函数名、形参和返回值。</li>\n<li>不能使用更严格的访问权限。</li>\n<li>需要同时为<code>static</code>或非<code>static</code>。</li>\n<li>子类抛出异常不能大于父类重写异常。</li>\n</ul>\n<p>理论上直接去重写就可以，加上<code>@Override</code>会更直观一点。</p>\n<p>我使用的是idea，快捷键是<code>Ctrl + o</code>可以快速重写。</p>\n<h5 id=\"super关键字\"><a href=\"#super关键字\" class=\"headerlink\" title=\"super关键字\"></a>super关键字</h5><p>作用：</p>\n<ul>\n<li>可以访问父类的属性。</li>\n<li>可以调用父类的方法。</li>\n<li>可以调用父类的构造方法。</li>\n</ul>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>具体体现在重写（针对子类重写）和重载（重名）上。</p>\n<h3 id=\"关键字static\"><a href=\"#关键字static\" class=\"headerlink\" title=\"关键字static\"></a>关键字<code>static</code></h3><p>只有通过<code>new</code>关键字才能实例化对象，关键字<code>static</code>修饰的变量或方法是类所有，实例化的对象可以共享此变量或方法。不想频繁修改或调用，就可以用<code>static</code>修饰的变量或方法，这样可以节省内存。</p>\n<h3 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h3><h4 id=\"instanceof操作符\"><a href=\"#instanceof操作符\" class=\"headerlink\" title=\"instanceof操作符\"></a><code>instanceof</code>操作符</h4><p>检查一个对象是否是一个类型，如果是就返回<code>true</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查e是否是Persion类型</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(e <span class=\"keyword\">instanceof</span> Persion)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Object类\"><a href=\"#Object类\" class=\"headerlink\" title=\"Object类\"></a><code>Object</code>类</h4><p>是所有类的根父类（基类），即使没有继承，默认也继承基类。</p>\n<p>如果想用一个对象作为形参，但不知道需要用什么数据类型时，可以使用<code>Object</code>类型，这样可以接受各种参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h4><p>子类可以直接转换父类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student s = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">Persion p = s;</span><br></pre></td></tr></table></figure>\n<p>父类需要强制转换成子类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Persion p = <span class=\"keyword\">new</span> Persion();</span><br><span class=\"line\">Student s = (Student) p;</span><br></pre></td></tr></table></figure>\n<p>注：无继承关系不能转换。</p>\n<h4 id=\"类比较大小\"><a href=\"#类比较大小\" class=\"headerlink\" title=\"类比较大小\"></a>类比较大小</h4><ul>\n<li><p><code>==</code>运算符：比较的只是值，基本类型就是直接比较大小，引用类型比较的是引用<strong>指针</strong>，指向同一个对象的时候会返回<code>true</code>。</p>\n</li>\n<li><p><code>equals()</code>方法：继承了<code>Object</code>的类都具有这个方法，和<code>==</code>相同，也是指向对象的是否相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1.equals(obj2);</span><br></pre></td></tr></table></figure>\n<p>对File、String、Data以及包装类来说比较的是<strong>内容</strong>是否相等。</p>\n</li>\n</ul>\n<p>字面量创建对象的时候，只会在常量池中引用其地址，而用<code>new</code>来分配内存创建对象的时候，会创建对象再考虑常量池。简单来讲字面量创建对象会节省内存。</p>\n<p>默认状态下，<code>equals()</code>方法比较的是地址，当然也可以自己定义比较的规则：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDate</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> year;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> month;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> day;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 构造函数赋值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyDate</span><span class=\"params\">(<span class=\"keyword\">int</span> year, <span class=\"keyword\">int</span> month, <span class=\"keyword\">int</span> day)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.year = year;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.month = month;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.day = day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 重写函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> boolen <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 检查是不是MyDate类型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj <span class=\"keyword\">instanceof</span> MyDate)&#123;</span><br><span class=\"line\">            MyDate md = (MyDate) obj;</span><br><span class=\"line\">            flag = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.year != md.year)</span><br><span class=\"line\">                flag++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.month != md.month)</span><br><span class=\"line\">                flag++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.day != md.day)</span><br><span class=\"line\">                flag++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h4><p>这是对基本数据类型的封装，这样可以使用一些方法：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">基本数据类型</th>\n<th style=\"text-align:center\">包装类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>boolean</code></td>\n<td style=\"text-align:center\"><code>Boolean</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>byte</code></td>\n<td style=\"text-align:center\"><code>Byte</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>short</code></td>\n<td style=\"text-align:center\"><code>Short</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>int</code></td>\n<td style=\"text-align:center\"><code>Integer</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>long</code></td>\n<td style=\"text-align:center\"><code>Long</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>char</code></td>\n<td style=\"text-align:center\"><code>Character</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>float</code></td>\n<td style=\"text-align:center\"><code>Float</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>double</code></td>\n<td style=\"text-align:center\"><code>Double</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// 装箱</span></span><br><span class=\"line\">Integer num2 = <span class=\"keyword\">new</span> Integer(num);</span><br><span class=\"line\"><span class=\"comment\">// 拆箱</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num3 = num2.intValue();</span><br></pre></td></tr></table></figure>\n<p>注：1.5版本后支持自动装箱和拆箱。</p>\n<p>常用操作：类型转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串转数字</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num1 = Integer.parseInt(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 数字转字符串</span></span><br><span class=\"line\">String str = String.valueof(num1);</span><br></pre></td></tr></table></figure>\n<h4 id=\"toString-的重写\"><a href=\"#toString-的重写\" class=\"headerlink\" title=\".toString()的重写\"></a><code>.toString()</code>的重写</h4><p>默认情况下，会返回内存地址，重写可以修改返回内容。并可以直接用变量去返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Persion p = <span class=\"keyword\">new</span> Persion();</span><br><span class=\"line\"><span class=\"comment\">// 以下两种情况一致</span></span><br><span class=\"line\">System.out.print(p.toString());</span><br><span class=\"line\">System.out.print(p);</span><br></pre></td></tr></table></figure>\n<h4 id=\"初始化代码块\"><a href=\"#初始化代码块\" class=\"headerlink\" title=\"初始化代码块\"></a>初始化代码块</h4><p>下面的类包含了一个初始化代码块：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性（成员变量）</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非静态初始化代码块</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 方法（成员函数）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;姓名：&quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用就是对java对象进行初始化，执行顺序就是：声明成员变量的默认值，多个初始化块共同执行，执行构造函数。</p>\n<p>初始化代码块可以拥有多个，执行顺序从上到下。</p>\n<p>注：静态代码块在类被声明就开始执行，只执行一次</p>\n<h4 id=\"final关键字\"><a href=\"#final关键字\" class=\"headerlink\" title=\"final关键字\"></a><code>final</code>关键字</h4><p>这个关键字可以让程序更加安全。</p>\n<ul>\n<li><code>final</code>标记的类不能被继承</li>\n<li><code>final</code>标记的方法不能被重写</li>\n<li><code>final</code>标记的变量只能赋值一次（常量，一般写成大写）</li>\n</ul>\n<h4 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h4><p>针对于父类，不要去写具体方法，在接下来继承中主要有针对地去写。</p>\n<p>用<code>abstract</code>修饰，可以修饰类和方法，含有抽象方法的类必须声明成抽象类。</p>\n<p>抽象类不能实例化，只能作为父类被继承。</p>\n<p>不能去修饰属性、私有方法、构造函数、静态方法、<code>final</code>标记的方法。</p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>java不支持多继承，所以可以使用接口来实现多继承的效果。</p>\n<p>接口是抽象方法和常量值的集合，本质上是一种特殊的抽象类，只包含常量定义和方法定义，没有实现过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InterfaceA</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> NUM;</span><br><span class=\"line\">    String STR;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类去继承</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceA</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fun1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fun2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>特点：</p>\n<ul>\n<li>用<code>interface</code>来定义</li>\n<li>默认<strong>成员变量</strong>全是<code>public static final</code>修饰</li>\n<li>默认<strong>方法</strong>全是<code>public abstract</code>修饰</li>\n<li>没有构造函数</li>\n<li>采用多继承机制</li>\n</ul>\n<p>注：生成文件最好是接口文件。</p>\n<p>类可以继承多个接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceA</span>,<span class=\"title\">InterfaceB</span>,<span class=\"title\">InterfaceC</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口可以继承接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InterfaceA</span> <span class=\"keyword\">extends</span> <span class=\"title\">InterfaceB</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：必须实现接口中所有的方法（重写），否则就是一个抽象类。</p>\n<p>接口好处是，修改接口内容，抽象类会不稳定，如果我们新建一个接口，让类去多继承，可以避免这些。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassA</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceA</span>,<span class=\"title\">InterfaceB</span>,<span class=\"title\">InterfaceC</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 继承了ClassA类</span></span><br><span class=\"line\">    <span class=\"comment\">// 实现了InterfaceA,InterfaceB,InterfaceC接口</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h3><p>顾名思义，类内定义一个类。</p>\n<h2 id=\"其他部分\"><a href=\"#其他部分\" class=\"headerlink\" title=\"其他部分\"></a>其他部分</h2><p>这部分就比较零散，主要涉及到一些其他操作。</p>\n<h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a><code>main</code>函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>public</code>：可以外部调用</li>\n<li><code>static</code>：类方法</li>\n<li><code>void</code>：无返回值</li>\n<li><code>String[] args</code>：可以传递字符串数组</li>\n</ul>\n<p>在使用命令行运行的时候，可以在后面添加其他参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java Test abc 123 jjj999</span><br></pre></td></tr></table></figure>\n<p>后面部分会进入到<code>args</code>数组中，并且可以为接下来提供参数。</p>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>程序运行难免会出现错误，一般出现异常就会直接停止程序。</p>\n<p>异常分类：</p>\n<ul>\n<li><code>Error</code>：JVM内部错误，例如资源消耗严重。</li>\n<li><code>Exception</code>：偶尔存在的外部错误，例如读取不存在的文件。</li>\n</ul>\n<h4 id=\"异常捕获\"><a href=\"#异常捕获\" class=\"headerlink\" title=\"异常捕获\"></a>异常捕获</h4><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有可能发生异常部分</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遇到这种异常时的处理异常内容</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 最终会执行的内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不知道捕获异常类型时，直接<code>Exception e</code>进行处理。</p>\n<p>一些操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接打印异常</span></span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\"><span class=\"comment\">// 返回异常内容</span></span><br><span class=\"line\">e.getMessage();</span><br></pre></td></tr></table></figure>\n<h4 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h4><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassA</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"comment\">// 主动抛出异常</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般是一个函数去主动抛出异常，如果遇到继承关系，子类重写时也需要抛出异常，但不能写范围小异常。</p>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><p>存放于<code>java.util</code>包中，是存放变量的容器。</p>\n<ul>\n<li>集合只能存放对象，基本数据类型会转化为对应的封装类。</li>\n<li>存放的方式为引用类型。</li>\n<li>可以存放不同类型。</li>\n<li>JDK5之后增加了泛型，可以记住对象中的数据类型。</li>\n</ul>\n<p>分类：</p>\n<ul>\n<li><code>Set</code>：无序，不可重复集合。</li>\n<li><code>List</code>：有序，可重复集合。</li>\n<li><code>Map</code>：具有映射关系集合。</li>\n</ul>\n<h4 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a><code>HashSet</code></h4><p>用Hash算法来存储集合中的元素，因此不能保证存储顺序，而且不能重复，不是线程安全。</p>\n<p>使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Set s = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\">        <span class=\"comment\">// 等价于 Set&lt;Object&gt; set = new HashSet&lt;Object&gt;();</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        s.add(obj);\t\t\t<span class=\"comment\">// 添加对象</span></span><br><span class=\"line\">        s.remove(obj);\t\t<span class=\"comment\">// 移除对象</span></span><br><span class=\"line\">        s.contains(obj);\t<span class=\"comment\">// 判断是否有此对象</span></span><br><span class=\"line\">        s.clear();\t\t\t<span class=\"comment\">// 清空集合</span></span><br><span class=\"line\">        s.size();\t\t\t<span class=\"comment\">// 返回集合大小</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//迭代器遍历</span></span><br><span class=\"line\">        Iterator it = s.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 每次循环判断是否有下一个</span></span><br><span class=\"line\">            System.out.println(it.hasNext());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// for遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Object obj : set)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 把每个集合之中的元素遍历</span></span><br><span class=\"line\">            <span class=\"comment\">// 和C++类似</span></span><br><span class=\"line\">            System.out.println(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用泛型</span></span><br><span class=\"line\">        <span class=\"comment\">// 这样只能存储单一的类型</span></span><br><span class=\"line\">        Set&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a><code>TreeSet</code></h4><p>确保集合排序状态，默认情况下采用自然排序。</p>\n<p>使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> TreeSet&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 大部分操作和HashSet一致</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a><code>ArrayList</code></h4><p>有序的可重复的集合，每个元素都有对应的索引，默认顺序为添加顺序。</p>\n<p>使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 大部分操作和HashSet一致</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a><code>HashMap</code></h4><p>就是键值对，键不允许重复。</p>\n<p>使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;a&quot;</span>,<span class=\"number\">1</span>); \t\t<span class=\"comment\">// 添加一个键值对</span></span><br><span class=\"line\">        map.get(<span class=\"string\">&quot;a&quot;</span>);\t\t\t<span class=\"comment\">// 通过键提取</span></span><br><span class=\"line\">        map.remove(<span class=\"string\">&quot;a&quot;</span>);\t\t<span class=\"comment\">// 通过键移除</span></span><br><span class=\"line\">        map.size();\t\t\t\t<span class=\"comment\">// 返回大小</span></span><br><span class=\"line\">        map.containsKey(<span class=\"string\">&quot;a&quot;</span>);\t<span class=\"comment\">// 判断是否有这个键</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"工具类：Collections\"><a href=\"#工具类：Collections\" class=\"headerlink\" title=\"工具类：Collections\"></a>工具类：<code>Collections</code></h4><p>主要提供一些有用的函数，这里不再赘述。</p>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><p>java泛型只在编译过程有效，编译后直接擦除对应的信息，不会到运行阶段。</p>\n<h4 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h4><p>具体使用和定义方法和C++类似。</p>\n<p>定义方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// T代表的是类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T obj;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口</h4><p>定义方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// T代表的是类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T obj;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T obj)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">B</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T obj;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"泛型方法\"><a href=\"#泛型方法\" class=\"headerlink\" title=\"泛型方法\"></a>泛型方法</h4><p>注：只能在函数内部使用。</p>\n<p>静态方法不能使用类定义泛型，如果想使用，只能使用静态方法自己定义的泛型。</p>\n<p>定义方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// T代表的是类型</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T obj)</span></span>&#123;</span><br><span class=\"line\">        T t = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">set</span><span class=\"params\">(T obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"泛型通配符\"><a href=\"#泛型通配符\" class=\"headerlink\" title=\"泛型通配符\"></a>泛型通配符</h4><p>使用一个<code>List</code>集合充当参数的时候，可以使用<code>?</code>充当通配符。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(List&lt;?&gt; list)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"枚举类\"><a href=\"#枚举类\" class=\"headerlink\" title=\"枚举类\"></a>枚举类</h3><p>如果一个对象有限且固定，可以使用枚举来限制，例如：四季。</p>\n<p>定义方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Season</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">    SPRING(<span class=\"string\">&quot;春天&quot;</span>,<span class=\"string\">&quot;1&quot;</span>),</span><br><span class=\"line\">    SUMMER(<span class=\"string\">&quot;夏天&quot;</span>,<span class=\"string\">&quot;2&quot;</span>),</span><br><span class=\"line\">    AUTUMN(<span class=\"string\">&quot;秋天&quot;</span>,<span class=\"string\">&quot;3&quot;</span>),</span><br><span class=\"line\">    WINTER(<span class=\"string\">&quot;冬天&quot;</span>,<span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String desc;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">season</span><span class=\"params\">(String name, String desc)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>规定了构造函数只能使用自己定义的几个。</p>\n<p>使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Season season = <span class=\"keyword\">new</span> Season.SPRING;</span><br></pre></td></tr></table></figure>\n<p>这样就可以单独返回规定的对象，而且获得的是相同对象（地址一样）。</p>\n<h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><p>程序员可以在程序中嵌入信息，不会改变逻辑，会保存在name=value对中。</p>\n<ul>\n<li><code>@Override</code>：限定重写父方法，只能用于方法。</li>\n<li><code>@Deprecated</code>：表示某个类或方法已过时。</li>\n<li><code>@SupperWarning</code>：抑制编译器的警告。</li>\n</ul>\n<h3 id=\"IO流\"><a href=\"#IO流\" class=\"headerlink\" title=\"IO流\"></a>IO流</h3><ul>\n<li>文件流：基于文件的操作。</li>\n<li>缓冲流：数据基于内存的操作。</li>\n</ul>\n<p>其他内容流懒得写了，看这<a href=\"https://www.runoob.com/java/java-files-io.html\">网站</a>吧。</p>\n<h2 id=\"扩展部分\"><a href=\"#扩展部分\" class=\"headerlink\" title=\"扩展部分\"></a>扩展部分</h2><h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><ul>\n<li>程序：为了完成某个任务。</li>\n<li>进程：正在运行的过程。</li>\n<li>线程：进程细分成线程，一个程序的一条执行路径。</li>\n</ul>\n<h4 id=\"Thread实现多线程\"><a href=\"#Thread实现多线程\" class=\"headerlink\" title=\"Thread实现多线程\"></a>Thread实现多线程</h4><p>通过<code>java.lang.Thread</code>类来实现，每个线程通过Thread对象的<code>run()</code>来实现，通常把<code>run()</code>方法称作<strong>线程体</strong>。通过<code>start()</code>方法调用这个线程。</p>\n<h5 id=\"构造方法：\"><a href=\"#构造方法：\" class=\"headerlink\" title=\"构造方法：\"></a>构造方法：</h5><ul>\n<li><code>Thread()</code>：创建新的Thread对象。</li>\n<li><code>Thread(String threadname)</code>：创建新的Thread对象，并指定名。</li>\n<li><code>Thread(Runnable target)</code>：实现Runnable接口来创建线程目标对象。</li>\n<li><code>Thread(Runnable target, String threadname)</code>：实现Runnable接口来创建线程目标对象，并指定名。</li>\n</ul>\n<p>方法一：</p>\n<p>继承Thread类，重写<code>run()</code>，创建子对象的时候就表示创造了线程对象，调用<code>start()</code>方法的时候就可以启动线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 继承Thread</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程代码&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">5</span>;i++)</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        MyThread t0 = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        <span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">        t0.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法二：</p>\n<p>定义子类，实现Runnable接口，重写<code>run()</code>，使用Thread的构造方法来实现，此方法局限性更小。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 继承Runnable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRun</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程代码&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">5</span>;i++)</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Thread t0 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyRun());</span><br><span class=\"line\">        <span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">        t0.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h5><p>优先级为1~10，数字越大，优先级越高。默认设置优先级为5，</p>\n<h5 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h5><ul>\n<li><code>start()</code>：启动线程</li>\n<li><code>run()</code>：线程内容</li>\n<li><code>getName()</code>：返回线程名称</li>\n<li><code>setName()</code>：设置线程名称</li>\n<li><code>static currentThread()</code>：返回当前线程</li>\n<li><code>getPriority()</code>：获取优先级</li>\n<li><code>setPriority()</code>：设置优先级</li>\n<li><code>static yield()</code>：线程让步</li>\n<li><code>join()</code>：线程强行加入（阻塞），一般用<code>try</code></li>\n<li><code>sleep()</code>：延时，单位毫秒</li>\n<li><code>stop()</code>：强制线程结束</li>\n</ul>\n<h4 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h4><p>过程：</p>\n<ul>\n<li>新建：实例化一个Thread对象。</li>\n<li>就绪：运行<code>.start()</code>之后，等待CPU时间片。</li>\n<li>运行：线程就绪之后，进行运行状态。</li>\n<li>阻塞：特殊情况时终止自己执行，进入阻塞。</li>\n<li>死亡：完成全部工作或强制终止。</li>\n</ul>\n<h4 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h4><ul>\n<li><code>wait()</code>：当前线程挂起并放弃CPU、同步资源，让别的线程可以进行访问并修改。当前线程状态为排队等候，等待被唤醒。</li>\n<li><code>notify()</code>：唤醒排队等候的线程。</li>\n<li><code>notifyAll()</code>：唤醒排队等候的所有线程。</li>\n</ul>\n","more":"<p>这是我当初学习java时的一些笔记，这几天翻出来看了一下，感觉可以作为一些参考，由于当时我有C/C++的基础，所以学习的速度非常快，有些地方直接和C/C++进行了对比，所以在观看的时候最好有一些编程基础。</p>\n<blockquote>\n<p><em>语言只是算法的载体，会得再多，也仅仅是获得了一个又一个躯壳，真正称得上灵魂的是算法，一个没有灵魂的躯壳，只能算一个行尸走肉。</em></p>\n</blockquote>\n<h2 id=\"开始前的一些准备\"><a href=\"#开始前的一些准备\" class=\"headerlink\" title=\"开始前的一些准备\"></a>开始前的一些准备</h2><h3 id=\"Java的三大版本\"><a href=\"#Java的三大版本\" class=\"headerlink\" title=\"Java的三大版本\"></a>Java的三大版本</h3><ul>\n<li>JavaSE：标准版（桌面应用程序，控制台开发）</li>\n<li><del>JavaME：嵌入式开发（手机app）</del></li>\n<li>JavaEE：企业开发</li>\n</ul>\n<h3 id=\"JDK、JRE、JVM\"><a href=\"#JDK、JRE、JVM\" class=\"headerlink\" title=\"JDK、JRE、JVM\"></a>JDK、JRE、JVM</h3><ul>\n<li>JDK：Java开发者工具（用来开发Java程序）</li>\n<li>JRE：Java运行环境（可以运行Java的程序）</li>\n<li>JVM：Java虚拟机（核心部分）</li>\n</ul>\n<h3 id=\"虚拟机机制\"><a href=\"#虚拟机机制\" class=\"headerlink\" title=\"虚拟机机制\"></a>虚拟机机制</h3><p><code>.java</code>文件编译成<code>.class</code>文件，在虚拟机（JVM）上运行，实现“一次编译处处运行”。</p>\n<h3 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h3><p>C/C++是程序员手动回收内存，高效准确，但容易失误。</p>\n<p>java自动垃圾回收，可以自动检测内存，虽然规避了失误，但不会非常高效。</p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>官网下载JDK，尽量使用稳定版本，推荐使用压缩包进行解压，之后再进行环境变量配置，在版本上可以更好的更换。</p>\n<p>配置环境变量包括：<code>JDK\\bin</code>和<code>JDK\\jre\\bin</code>。</p>\n<p>检测方法，输入<code>java -version</code>会出现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java version &quot;1.8.0_101&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_101-b13)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第一个程序\"><a href=\"#第一个程序\" class=\"headerlink\" title=\"第一个程序\"></a>第一个程序</h3><ol>\n<li><p>建立<code>Test.java</code>文件，用来写代码。</p>\n</li>\n<li><p>写下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打印后不会换行</span></span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 打印后自动换行</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，类的名字和文件名字要一致。</p>\n</li>\n<li><p>打开命令窗口，cd到目标文件的路径，输入以下指令进行编译：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac Test.java</span><br></pre></td></tr></table></figure>\n<p>编译完之后就会出现一个名字相同的<code>.class</code>文件。</p>\n</li>\n<li><p>运行<code>Test.class</code>文件，需要输入以下程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java Test</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2></li>\n</ol>\n<p>这一部分的特点是java的基础部分，大部分非常和C/C++类似，所以有点基础的话简单看看就基本了解。</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li><p>单行注释：同C/C++，<code>//注释内容</code></p>\n</li>\n<li><p>多行注释：同C/C++，<code>/*注释内容*/</code></p>\n<p>文档注释：java特有</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*类名</span></span><br><span class=\"line\"><span class=\"comment\">*描述</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@author</span> 作者名</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@version</span> 版本</span></span><br><span class=\"line\"><span class=\"comment\">*<span class=\"doctag\">@since</span> jdk版本</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3></li>\n</ul>\n<p>不是强制，但更具有规范性。</p>\n<ul>\n<li>包名：所有字母小写。</li>\n<li>类名、接口名：大驼峰命名。</li>\n<li>变量名、方法名：小驼峰命名。</li>\n<li>常量名：所有字母大写，多单词时用下划线分割。</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p><strong>注：</strong>八种<strong>基本数据类型</strong>之外全是<strong>引用数据类型</strong>。</p>\n<h4 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h4><ul>\n<li>整型<ul>\n<li><code>byte</code>：1字节</li>\n<li><code>short</code>：2字节</li>\n<li><code>int</code>：4字节</li>\n<li><code>long</code>：8字节</li>\n</ul>\n</li>\n<li>浮点型<ul>\n<li><code>float</code>：单精度（7位有效数字），4字节</li>\n<li><code>double</code>：双精度（16位有效数字），8字节</li>\n</ul>\n</li>\n<li>字符型：<code>char</code></li>\n<li>布尔型：<code>boolean</code></li>\n</ul>\n<h4 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h4><ul>\n<li>类</li>\n<li>接口</li>\n<li>数组</li>\n</ul>\n<h4 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a><code>String</code>类型</h4><p>引用类型的一种，当出现两个相同的内容时，会分配相同的内存。</p>\n<p>可以使用“+”来进行拼接，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = <span class=\"string\">&quot;hello &quot;</span> + <span class=\"string\">&quot;world&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>注：只要有一个String类型进行相加时，就会合并成字符串，但前面会进行直接计算。</p>\n<h3 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h3><h4 id=\"基本转换\"><a href=\"#基本转换\" class=\"headerlink\" title=\"基本转换\"></a>基本转换</h4><p>(char、byte、short) —&gt; int —&gt; long —&gt; float —&gt; double</p>\n<h4 id=\"强制转换\"><a href=\"#强制转换\" class=\"headerlink\" title=\"强制转换\"></a>强制转换</h4><p>举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> number = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">byte</span> temp = (<span class=\"keyword\">byte</span>)number;</span><br></pre></td></tr></table></figure>\n<p>虽然强制转换很不错，这种操作会出现溢出现象，而且只针对基本数据类型。</p>\n<p>注：布尔类型不能转换成其他类型。</p>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>数学运算符、赋值运算符、逻辑运算符、比较运算符、位运算符、三元运算符，这些操作和C/C++类似，不再赘述。</p>\n<h3 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h3><p>条件语句、循环语句、特殊语句（break、continue、return），这些操作和C/C++类似，不再赘述。</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><h4 id=\"声明和初始化\"><a href=\"#声明和初始化\" class=\"headerlink\" title=\"声明和初始化\"></a>声明和初始化</h4><p>变量声明完就要初始化，这涉及到一些java运行机制，所以必须这样操作。但在声明数组的时候可以不用初始化，值得注意的是，java数组声明和C/C++有点不同：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个int数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] num;</span><br><span class=\"line\"><span class=\"keyword\">int</span> num[];</span><br></pre></td></tr></table></figure>\n<p>和C/C++不同点主要是可以把中括号直接放前面。</p>\n<p>虽然可以不用初始化，但一般还是直接初始化，这里需要使用new关键字，new作用就是分配空间。</p>\n<p>以下为动态初始化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个int数组，并初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br></pre></td></tr></table></figure>\n<p>动态初始化不会进行赋值，所以初始化完后会是默认值，初始化同时需要说明数据类型和分配大小。</p>\n<p>还有一种静态初始化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个int数组，并初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>这种直接初始化并赋值，不用说明空间申请大小。</p>\n<h4 id=\"内部方法和属性\"><a href=\"#内部方法和属性\" class=\"headerlink\" title=\"内部方法和属性\"></a>内部方法和属性</h4><p>每个数组提供了一个length属性，可以利用这个属性直接查看这个数组的大小：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> len = num.length;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h4><p>其实就是每个数组中的每个元素就是一个数组，这样可以进行不断的数组嵌套。</p>\n<p>书写方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动态初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num1[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 静态初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num2[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[][]&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只定义第一个维度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num3[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>][];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以不相同</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num2[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[][]&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"核心部分\"><a href=\"#核心部分\" class=\"headerlink\" title=\"核心部分\"></a>核心部分</h2><p>java是一个<strong>强</strong>面向对象的语言，比C++和Python还要强调对象的概念，这部分主要去讲面向对象的一些操作。</p>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><h4 id=\"写一个类\"><a href=\"#写一个类\" class=\"headerlink\" title=\"写一个类\"></a>写一个类</h4><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性（成员变量）</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> sex;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 方法（成员函数）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;姓名：&quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>成员变量是可以不用初始化的，因为有默认值。</p>\n<p>新建文件，类和文件名相同。</p>\n<h4 id=\"实例化一个类\"><a href=\"#实例化一个类\" class=\"headerlink\" title=\"实例化一个类\"></a>实例化一个类</h4><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个Persion对象，并实例化</span></span><br><span class=\"line\">Persion persion;</span><br><span class=\"line\">persion = <span class=\"keyword\">new</span> Persion();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//与上面相同</span></span><br><span class=\"line\">Persion persion = <span class=\"keyword\">new</span> Persion();</span><br></pre></td></tr></table></figure>\n<h4 id=\"匿名对象\"><a href=\"#匿名对象\" class=\"headerlink\" title=\"匿名对象\"></a>匿名对象</h4><p>不定义对象句柄，直接实例化，接着使用内部的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Persion().showName();</span><br></pre></td></tr></table></figure>\n<p>特点就是只使用一次就可以，或者将其作为实参直接传递。</p>\n<h3 id=\"类的属性\"><a href=\"#类的属性\" class=\"headerlink\" title=\"类的属性\"></a>类的属性</h3><p>语法格式：修饰符 类型 属性名 = 初值</p>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><ul>\n<li><code>public</code>：公有，外部可以直接访问。</li>\n<li><code>private</code>：私有，只能通过类的内部访问。</li>\n</ul>\n<h4 id=\"成员变量的两种方式\"><a href=\"#成员变量的两种方式\" class=\"headerlink\" title=\"成员变量的两种方式\"></a>成员变量的两种方式</h4><ul>\n<li><p>实例变量：最普通的变量，类实例化之后才能使用</p>\n</li>\n<li><p>类变量：在中间加上<code>static</code>进行修饰，类不用实例化，直接通过<code>类名.属性</code>就可以使用，存在于静态域。</p>\n<p><code>static</code>的方法只能访问<code>static</code>的变量，但普通方法可以访问<code>static</code>变量。</p>\n</li>\n</ul>\n<h3 id=\"类的方法\"><a href=\"#类的方法\" class=\"headerlink\" title=\"类的方法\"></a>类的方法</h3><p>完成某些功能的函数。</p>\n<h4 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h4><p>java的参数传递方式很有意思，准确来讲是<strong>值传递</strong>。</p>\n<p>首先讲一下虚拟机的内存模型：</p>\n<p>虚拟机中有栈（stack）、堆（heap）和方法区（method）：</p>\n<ul>\n<li>栈（stack）：保存了所有的基本数据类型和引用数据类型的地址。</li>\n<li>堆（heap）：所有对象，引用数据类型的地址指向这里。</li>\n<li>方法区（method）：所有class和static变量</li>\n</ul>\n<p>当使用基本数据类型的时候，由于值传递，直接是拷贝了数据放在栈中，函数结束的时候直接销毁。</p>\n<p>当使用引用数据类型的时候，由于值传递，拷贝了这个引用类型的地址，所以放在栈中的是该对象的地址（也就是指针），那么接下来使用的时候该地址指向了原对象，这就很有意思了，直接变成了引用传递。</p>\n<h4 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h4><p>一个类中可以存在多个同名方法，前提是参数的个数不同或者类型不同。</p>\n<h4 id=\"多参数传递\"><a href=\"#多参数传递\" class=\"headerlink\" title=\"多参数传递\"></a>多参数传递</h4><h5 id=\"使用数组传递可变参数\"><a href=\"#使用数组传递可变参数\" class=\"headerlink\" title=\"使用数组传递可变参数\"></a>使用数组传递可变参数</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 函数的内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>&#125;</span><br><span class=\"line\">persion.show(str);</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用java特有方式\"><a href=\"#使用java特有方式\" class=\"headerlink\" title=\"使用java特有方式\"></a>使用java特有方式</h5><p>其实和数组的使用方式相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(String... args)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 函数的内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>&#125;</span><br><span class=\"line\">persion.show(str);</span><br><span class=\"line\"><span class=\"comment\">// 也可以这样用</span></span><br><span class=\"line\">persion.show(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<ul>\n<li>第二种可以不写参数，但使用第一种的时候需要将null（空数组）传递进去。</li>\n<li>必须放在最后，前面部分放其他类型。</li>\n</ul>\n<h3 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h3><p>java没有命名空间的概念，但包的管理解决了命名冲突的问题，同时方便管理了其他的程序。</p>\n<p>本质就是一个文件夹，文件夹中的每一个程序文件里最开始都有一句语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> 顶层包名.子包名;</span><br></pre></td></tr></table></figure>\n<p>这句指明该类所属的包，如果<strong>同一个包下调用文件</strong>可以不用说明。</p>\n<p>比较常用的命名方式：</p>\n<ul>\n<li>小写，这样可以区分类文件</li>\n<li>使用公司倒置命名，例如百度的域名：<code>www.baidu.com</code>，可以命名成<code>com.baidu.www</code></li>\n</ul>\n<p>调用的方式也很简单（上面的例子）：<code>import com.baidu.www.Demo</code></p>\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><h4 id=\"修饰符的区别\"><a href=\"#修饰符的区别\" class=\"headerlink\" title=\"修饰符的区别\"></a>修饰符的区别</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>类内部调用</th>\n<th>同一包内调用</th>\n<th>子类调用</th>\n<th>其他地方</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>private</code></td>\n<td>Yes</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>（缺省）</td>\n<td>Yes</td>\n<td>Yes</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>protect</code></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td></td>\n</tr>\n<tr>\n<td><code>public</code></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h4><p>构造函数与类名相同，没有返回值，当实例化这个对象的时候就会调用这个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Persion</span><span class=\"params\">(<span class=\"keyword\">int</span> age, String name)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Persion persion = <span class=\"keyword\">new</span> Persion(<span class=\"number\">18</span>,<span class=\"string\">&quot;wang&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>如果定义了构造函数，就不会使用默认的构造函数。</p>\n<p>同样道理，构造函数也存在重载，可以提供多种初始化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Persion</span><span class=\"params\">(<span class=\"keyword\">int</span> age, String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构造函数1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Persion</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构造函数2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Persion</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构造函数3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Persion</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构造函数4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Persion persion = <span class=\"keyword\">new</span> Persion(<span class=\"number\">18</span>,<span class=\"string\">&quot;wang&quot;</span>);</span><br><span class=\"line\">Persion persion = <span class=\"keyword\">new</span> Persion(<span class=\"number\">18</span>);</span><br><span class=\"line\">Persion persion = <span class=\"keyword\">new</span> Persion(<span class=\"string\">&quot;wang&quot;</span>);</span><br><span class=\"line\">Persion persion = <span class=\"keyword\">new</span> Persion();</span><br></pre></td></tr></table></figure>\n<h4 id=\"this关键字\"><a href=\"#this关键字\" class=\"headerlink\" title=\"this关键字\"></a>this关键字</h4><p>表示当前对象，可以调用自己成员，主要是区分形参和类的成员变量的重名。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Persion</span><span class=\"params\">(<span class=\"keyword\">int</span> age, String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;姓名：&quot;</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以让<code>this()</code>为自己调用自己的构造函数，但必须有一个不用<code>this()</code>的构造函数。</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">\tString school;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>extends</code>继承了<code>Persion</code>类，拥有<code>Persion</code>类的所有成员。</p>\n<p>注：不要仅为了一个功能去继承。</p>\n<p>java只支持单继承，不允许多继承，允许多层继承。</p>\n<h4 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h4><p>方法重写可以更改从父类继承过来的函数，方便更好的使用。</p>\n<p>要求：</p>\n<ul>\n<li>必须拥有相同的函数名、形参和返回值。</li>\n<li>不能使用更严格的访问权限。</li>\n<li>需要同时为<code>static</code>或非<code>static</code>。</li>\n<li>子类抛出异常不能大于父类重写异常。</li>\n</ul>\n<p>理论上直接去重写就可以，加上<code>@Override</code>会更直观一点。</p>\n<p>我使用的是idea，快捷键是<code>Ctrl + o</code>可以快速重写。</p>\n<h5 id=\"super关键字\"><a href=\"#super关键字\" class=\"headerlink\" title=\"super关键字\"></a>super关键字</h5><p>作用：</p>\n<ul>\n<li>可以访问父类的属性。</li>\n<li>可以调用父类的方法。</li>\n<li>可以调用父类的构造方法。</li>\n</ul>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>具体体现在重写（针对子类重写）和重载（重名）上。</p>\n<h3 id=\"关键字static\"><a href=\"#关键字static\" class=\"headerlink\" title=\"关键字static\"></a>关键字<code>static</code></h3><p>只有通过<code>new</code>关键字才能实例化对象，关键字<code>static</code>修饰的变量或方法是类所有，实例化的对象可以共享此变量或方法。不想频繁修改或调用，就可以用<code>static</code>修饰的变量或方法，这样可以节省内存。</p>\n<h3 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h3><h4 id=\"instanceof操作符\"><a href=\"#instanceof操作符\" class=\"headerlink\" title=\"instanceof操作符\"></a><code>instanceof</code>操作符</h4><p>检查一个对象是否是一个类型，如果是就返回<code>true</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查e是否是Persion类型</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(e <span class=\"keyword\">instanceof</span> Persion)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Object类\"><a href=\"#Object类\" class=\"headerlink\" title=\"Object类\"></a><code>Object</code>类</h4><p>是所有类的根父类（基类），即使没有继承，默认也继承基类。</p>\n<p>如果想用一个对象作为形参，但不知道需要用什么数据类型时，可以使用<code>Object</code>类型，这样可以接受各种参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h4><p>子类可以直接转换父类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student s = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">Persion p = s;</span><br></pre></td></tr></table></figure>\n<p>父类需要强制转换成子类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Persion p = <span class=\"keyword\">new</span> Persion();</span><br><span class=\"line\">Student s = (Student) p;</span><br></pre></td></tr></table></figure>\n<p>注：无继承关系不能转换。</p>\n<h4 id=\"类比较大小\"><a href=\"#类比较大小\" class=\"headerlink\" title=\"类比较大小\"></a>类比较大小</h4><ul>\n<li><p><code>==</code>运算符：比较的只是值，基本类型就是直接比较大小，引用类型比较的是引用<strong>指针</strong>，指向同一个对象的时候会返回<code>true</code>。</p>\n</li>\n<li><p><code>equals()</code>方法：继承了<code>Object</code>的类都具有这个方法，和<code>==</code>相同，也是指向对象的是否相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1.equals(obj2);</span><br></pre></td></tr></table></figure>\n<p>对File、String、Data以及包装类来说比较的是<strong>内容</strong>是否相等。</p>\n</li>\n</ul>\n<p>字面量创建对象的时候，只会在常量池中引用其地址，而用<code>new</code>来分配内存创建对象的时候，会创建对象再考虑常量池。简单来讲字面量创建对象会节省内存。</p>\n<p>默认状态下，<code>equals()</code>方法比较的是地址，当然也可以自己定义比较的规则：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDate</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> year;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> month;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> day;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 构造函数赋值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyDate</span><span class=\"params\">(<span class=\"keyword\">int</span> year, <span class=\"keyword\">int</span> month, <span class=\"keyword\">int</span> day)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.year = year;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.month = month;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.day = day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 重写函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> boolen <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 检查是不是MyDate类型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj <span class=\"keyword\">instanceof</span> MyDate)&#123;</span><br><span class=\"line\">            MyDate md = (MyDate) obj;</span><br><span class=\"line\">            flag = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.year != md.year)</span><br><span class=\"line\">                flag++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.month != md.month)</span><br><span class=\"line\">                flag++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.day != md.day)</span><br><span class=\"line\">                flag++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h4><p>这是对基本数据类型的封装，这样可以使用一些方法：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">基本数据类型</th>\n<th style=\"text-align:center\">包装类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>boolean</code></td>\n<td style=\"text-align:center\"><code>Boolean</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>byte</code></td>\n<td style=\"text-align:center\"><code>Byte</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>short</code></td>\n<td style=\"text-align:center\"><code>Short</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>int</code></td>\n<td style=\"text-align:center\"><code>Integer</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>long</code></td>\n<td style=\"text-align:center\"><code>Long</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>char</code></td>\n<td style=\"text-align:center\"><code>Character</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>float</code></td>\n<td style=\"text-align:center\"><code>Float</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>double</code></td>\n<td style=\"text-align:center\"><code>Double</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// 装箱</span></span><br><span class=\"line\">Integer num2 = <span class=\"keyword\">new</span> Integer(num);</span><br><span class=\"line\"><span class=\"comment\">// 拆箱</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num3 = num2.intValue();</span><br></pre></td></tr></table></figure>\n<p>注：1.5版本后支持自动装箱和拆箱。</p>\n<p>常用操作：类型转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串转数字</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num1 = Integer.parseInt(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 数字转字符串</span></span><br><span class=\"line\">String str = String.valueof(num1);</span><br></pre></td></tr></table></figure>\n<h4 id=\"toString-的重写\"><a href=\"#toString-的重写\" class=\"headerlink\" title=\".toString()的重写\"></a><code>.toString()</code>的重写</h4><p>默认情况下，会返回内存地址，重写可以修改返回内容。并可以直接用变量去返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Persion p = <span class=\"keyword\">new</span> Persion();</span><br><span class=\"line\"><span class=\"comment\">// 以下两种情况一致</span></span><br><span class=\"line\">System.out.print(p.toString());</span><br><span class=\"line\">System.out.print(p);</span><br></pre></td></tr></table></figure>\n<h4 id=\"初始化代码块\"><a href=\"#初始化代码块\" class=\"headerlink\" title=\"初始化代码块\"></a>初始化代码块</h4><p>下面的类包含了一个初始化代码块：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Persion</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性（成员变量）</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非静态初始化代码块</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 方法（成员函数）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;姓名：&quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用就是对java对象进行初始化，执行顺序就是：声明成员变量的默认值，多个初始化块共同执行，执行构造函数。</p>\n<p>初始化代码块可以拥有多个，执行顺序从上到下。</p>\n<p>注：静态代码块在类被声明就开始执行，只执行一次</p>\n<h4 id=\"final关键字\"><a href=\"#final关键字\" class=\"headerlink\" title=\"final关键字\"></a><code>final</code>关键字</h4><p>这个关键字可以让程序更加安全。</p>\n<ul>\n<li><code>final</code>标记的类不能被继承</li>\n<li><code>final</code>标记的方法不能被重写</li>\n<li><code>final</code>标记的变量只能赋值一次（常量，一般写成大写）</li>\n</ul>\n<h4 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h4><p>针对于父类，不要去写具体方法，在接下来继承中主要有针对地去写。</p>\n<p>用<code>abstract</code>修饰，可以修饰类和方法，含有抽象方法的类必须声明成抽象类。</p>\n<p>抽象类不能实例化，只能作为父类被继承。</p>\n<p>不能去修饰属性、私有方法、构造函数、静态方法、<code>final</code>标记的方法。</p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>java不支持多继承，所以可以使用接口来实现多继承的效果。</p>\n<p>接口是抽象方法和常量值的集合，本质上是一种特殊的抽象类，只包含常量定义和方法定义，没有实现过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InterfaceA</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> NUM;</span><br><span class=\"line\">    String STR;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类去继承</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceA</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fun1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fun2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>特点：</p>\n<ul>\n<li>用<code>interface</code>来定义</li>\n<li>默认<strong>成员变量</strong>全是<code>public static final</code>修饰</li>\n<li>默认<strong>方法</strong>全是<code>public abstract</code>修饰</li>\n<li>没有构造函数</li>\n<li>采用多继承机制</li>\n</ul>\n<p>注：生成文件最好是接口文件。</p>\n<p>类可以继承多个接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceA</span>,<span class=\"title\">InterfaceB</span>,<span class=\"title\">InterfaceC</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口可以继承接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InterfaceA</span> <span class=\"keyword\">extends</span> <span class=\"title\">InterfaceB</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：必须实现接口中所有的方法（重写），否则就是一个抽象类。</p>\n<p>接口好处是，修改接口内容，抽象类会不稳定，如果我们新建一个接口，让类去多继承，可以避免这些。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassA</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceA</span>,<span class=\"title\">InterfaceB</span>,<span class=\"title\">InterfaceC</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 继承了ClassA类</span></span><br><span class=\"line\">    <span class=\"comment\">// 实现了InterfaceA,InterfaceB,InterfaceC接口</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h3><p>顾名思义，类内定义一个类。</p>\n<h2 id=\"其他部分\"><a href=\"#其他部分\" class=\"headerlink\" title=\"其他部分\"></a>其他部分</h2><p>这部分就比较零散，主要涉及到一些其他操作。</p>\n<h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a><code>main</code>函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>public</code>：可以外部调用</li>\n<li><code>static</code>：类方法</li>\n<li><code>void</code>：无返回值</li>\n<li><code>String[] args</code>：可以传递字符串数组</li>\n</ul>\n<p>在使用命令行运行的时候，可以在后面添加其他参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java Test abc 123 jjj999</span><br></pre></td></tr></table></figure>\n<p>后面部分会进入到<code>args</code>数组中，并且可以为接下来提供参数。</p>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>程序运行难免会出现错误，一般出现异常就会直接停止程序。</p>\n<p>异常分类：</p>\n<ul>\n<li><code>Error</code>：JVM内部错误，例如资源消耗严重。</li>\n<li><code>Exception</code>：偶尔存在的外部错误，例如读取不存在的文件。</li>\n</ul>\n<h4 id=\"异常捕获\"><a href=\"#异常捕获\" class=\"headerlink\" title=\"异常捕获\"></a>异常捕获</h4><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有可能发生异常部分</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遇到这种异常时的处理异常内容</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 最终会执行的内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不知道捕获异常类型时，直接<code>Exception e</code>进行处理。</p>\n<p>一些操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接打印异常</span></span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\"><span class=\"comment\">// 返回异常内容</span></span><br><span class=\"line\">e.getMessage();</span><br></pre></td></tr></table></figure>\n<h4 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h4><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassA</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"comment\">// 主动抛出异常</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般是一个函数去主动抛出异常，如果遇到继承关系，子类重写时也需要抛出异常，但不能写范围小异常。</p>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><p>存放于<code>java.util</code>包中，是存放变量的容器。</p>\n<ul>\n<li>集合只能存放对象，基本数据类型会转化为对应的封装类。</li>\n<li>存放的方式为引用类型。</li>\n<li>可以存放不同类型。</li>\n<li>JDK5之后增加了泛型，可以记住对象中的数据类型。</li>\n</ul>\n<p>分类：</p>\n<ul>\n<li><code>Set</code>：无序，不可重复集合。</li>\n<li><code>List</code>：有序，可重复集合。</li>\n<li><code>Map</code>：具有映射关系集合。</li>\n</ul>\n<h4 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a><code>HashSet</code></h4><p>用Hash算法来存储集合中的元素，因此不能保证存储顺序，而且不能重复，不是线程安全。</p>\n<p>使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Set s = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\">        <span class=\"comment\">// 等价于 Set&lt;Object&gt; set = new HashSet&lt;Object&gt;();</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        s.add(obj);\t\t\t<span class=\"comment\">// 添加对象</span></span><br><span class=\"line\">        s.remove(obj);\t\t<span class=\"comment\">// 移除对象</span></span><br><span class=\"line\">        s.contains(obj);\t<span class=\"comment\">// 判断是否有此对象</span></span><br><span class=\"line\">        s.clear();\t\t\t<span class=\"comment\">// 清空集合</span></span><br><span class=\"line\">        s.size();\t\t\t<span class=\"comment\">// 返回集合大小</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//迭代器遍历</span></span><br><span class=\"line\">        Iterator it = s.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 每次循环判断是否有下一个</span></span><br><span class=\"line\">            System.out.println(it.hasNext());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// for遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Object obj : set)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 把每个集合之中的元素遍历</span></span><br><span class=\"line\">            <span class=\"comment\">// 和C++类似</span></span><br><span class=\"line\">            System.out.println(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用泛型</span></span><br><span class=\"line\">        <span class=\"comment\">// 这样只能存储单一的类型</span></span><br><span class=\"line\">        Set&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a><code>TreeSet</code></h4><p>确保集合排序状态，默认情况下采用自然排序。</p>\n<p>使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> TreeSet&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 大部分操作和HashSet一致</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a><code>ArrayList</code></h4><p>有序的可重复的集合，每个元素都有对应的索引，默认顺序为添加顺序。</p>\n<p>使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 大部分操作和HashSet一致</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a><code>HashMap</code></h4><p>就是键值对，键不允许重复。</p>\n<p>使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;a&quot;</span>,<span class=\"number\">1</span>); \t\t<span class=\"comment\">// 添加一个键值对</span></span><br><span class=\"line\">        map.get(<span class=\"string\">&quot;a&quot;</span>);\t\t\t<span class=\"comment\">// 通过键提取</span></span><br><span class=\"line\">        map.remove(<span class=\"string\">&quot;a&quot;</span>);\t\t<span class=\"comment\">// 通过键移除</span></span><br><span class=\"line\">        map.size();\t\t\t\t<span class=\"comment\">// 返回大小</span></span><br><span class=\"line\">        map.containsKey(<span class=\"string\">&quot;a&quot;</span>);\t<span class=\"comment\">// 判断是否有这个键</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"工具类：Collections\"><a href=\"#工具类：Collections\" class=\"headerlink\" title=\"工具类：Collections\"></a>工具类：<code>Collections</code></h4><p>主要提供一些有用的函数，这里不再赘述。</p>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><p>java泛型只在编译过程有效，编译后直接擦除对应的信息，不会到运行阶段。</p>\n<h4 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h4><p>具体使用和定义方法和C++类似。</p>\n<p>定义方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// T代表的是类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T obj;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口</h4><p>定义方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// T代表的是类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T obj;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T obj)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">B</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T obj;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"泛型方法\"><a href=\"#泛型方法\" class=\"headerlink\" title=\"泛型方法\"></a>泛型方法</h4><p>注：只能在函数内部使用。</p>\n<p>静态方法不能使用类定义泛型，如果想使用，只能使用静态方法自己定义的泛型。</p>\n<p>定义方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// T代表的是类型</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T obj)</span></span>&#123;</span><br><span class=\"line\">        T t = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">set</span><span class=\"params\">(T obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"泛型通配符\"><a href=\"#泛型通配符\" class=\"headerlink\" title=\"泛型通配符\"></a>泛型通配符</h4><p>使用一个<code>List</code>集合充当参数的时候，可以使用<code>?</code>充当通配符。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(List&lt;?&gt; list)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"枚举类\"><a href=\"#枚举类\" class=\"headerlink\" title=\"枚举类\"></a>枚举类</h3><p>如果一个对象有限且固定，可以使用枚举来限制，例如：四季。</p>\n<p>定义方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Season</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">    SPRING(<span class=\"string\">&quot;春天&quot;</span>,<span class=\"string\">&quot;1&quot;</span>),</span><br><span class=\"line\">    SUMMER(<span class=\"string\">&quot;夏天&quot;</span>,<span class=\"string\">&quot;2&quot;</span>),</span><br><span class=\"line\">    AUTUMN(<span class=\"string\">&quot;秋天&quot;</span>,<span class=\"string\">&quot;3&quot;</span>),</span><br><span class=\"line\">    WINTER(<span class=\"string\">&quot;冬天&quot;</span>,<span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String desc;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">season</span><span class=\"params\">(String name, String desc)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>规定了构造函数只能使用自己定义的几个。</p>\n<p>使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Season season = <span class=\"keyword\">new</span> Season.SPRING;</span><br></pre></td></tr></table></figure>\n<p>这样就可以单独返回规定的对象，而且获得的是相同对象（地址一样）。</p>\n<h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><p>程序员可以在程序中嵌入信息，不会改变逻辑，会保存在name=value对中。</p>\n<ul>\n<li><code>@Override</code>：限定重写父方法，只能用于方法。</li>\n<li><code>@Deprecated</code>：表示某个类或方法已过时。</li>\n<li><code>@SupperWarning</code>：抑制编译器的警告。</li>\n</ul>\n<h3 id=\"IO流\"><a href=\"#IO流\" class=\"headerlink\" title=\"IO流\"></a>IO流</h3><ul>\n<li>文件流：基于文件的操作。</li>\n<li>缓冲流：数据基于内存的操作。</li>\n</ul>\n<p>其他内容流懒得写了，看这<a href=\"https://www.runoob.com/java/java-files-io.html\">网站</a>吧。</p>\n<h2 id=\"扩展部分\"><a href=\"#扩展部分\" class=\"headerlink\" title=\"扩展部分\"></a>扩展部分</h2><h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><ul>\n<li>程序：为了完成某个任务。</li>\n<li>进程：正在运行的过程。</li>\n<li>线程：进程细分成线程，一个程序的一条执行路径。</li>\n</ul>\n<h4 id=\"Thread实现多线程\"><a href=\"#Thread实现多线程\" class=\"headerlink\" title=\"Thread实现多线程\"></a>Thread实现多线程</h4><p>通过<code>java.lang.Thread</code>类来实现，每个线程通过Thread对象的<code>run()</code>来实现，通常把<code>run()</code>方法称作<strong>线程体</strong>。通过<code>start()</code>方法调用这个线程。</p>\n<h5 id=\"构造方法：\"><a href=\"#构造方法：\" class=\"headerlink\" title=\"构造方法：\"></a>构造方法：</h5><ul>\n<li><code>Thread()</code>：创建新的Thread对象。</li>\n<li><code>Thread(String threadname)</code>：创建新的Thread对象，并指定名。</li>\n<li><code>Thread(Runnable target)</code>：实现Runnable接口来创建线程目标对象。</li>\n<li><code>Thread(Runnable target, String threadname)</code>：实现Runnable接口来创建线程目标对象，并指定名。</li>\n</ul>\n<p>方法一：</p>\n<p>继承Thread类，重写<code>run()</code>，创建子对象的时候就表示创造了线程对象，调用<code>start()</code>方法的时候就可以启动线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 继承Thread</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程代码&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">5</span>;i++)</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        MyThread t0 = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        <span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">        t0.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法二：</p>\n<p>定义子类，实现Runnable接口，重写<code>run()</code>，使用Thread的构造方法来实现，此方法局限性更小。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 继承Runnable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRun</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程代码&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">5</span>;i++)</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Thread t0 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyRun());</span><br><span class=\"line\">        <span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">        t0.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h5><p>优先级为1~10，数字越大，优先级越高。默认设置优先级为5，</p>\n<h5 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h5><ul>\n<li><code>start()</code>：启动线程</li>\n<li><code>run()</code>：线程内容</li>\n<li><code>getName()</code>：返回线程名称</li>\n<li><code>setName()</code>：设置线程名称</li>\n<li><code>static currentThread()</code>：返回当前线程</li>\n<li><code>getPriority()</code>：获取优先级</li>\n<li><code>setPriority()</code>：设置优先级</li>\n<li><code>static yield()</code>：线程让步</li>\n<li><code>join()</code>：线程强行加入（阻塞），一般用<code>try</code></li>\n<li><code>sleep()</code>：延时，单位毫秒</li>\n<li><code>stop()</code>：强制线程结束</li>\n</ul>\n<h4 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h4><p>过程：</p>\n<ul>\n<li>新建：实例化一个Thread对象。</li>\n<li>就绪：运行<code>.start()</code>之后，等待CPU时间片。</li>\n<li>运行：线程就绪之后，进行运行状态。</li>\n<li>阻塞：特殊情况时终止自己执行，进入阻塞。</li>\n<li>死亡：完成全部工作或强制终止。</li>\n</ul>\n<h4 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h4><ul>\n<li><code>wait()</code>：当前线程挂起并放弃CPU、同步资源，让别的线程可以进行访问并修改。当前线程状态为排队等候，等待被唤醒。</li>\n<li><code>notify()</code>：唤醒排队等候的线程。</li>\n<li><code>notifyAll()</code>：唤醒排队等候的所有线程。</li>\n</ul>\n","categories":[{"name":"Matrix的笔记本","path":"api/categories/Matrix的笔记本.json"}],"tags":[{"name":"java","path":"api/tags/java.json"}]}